// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `kubernetes.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct KubernetesMetrics {
    // message fields
    pub site_id: ::std::string::String,
    pub node_name: ::std::string::String,
    pub pod_name: ::std::string::String,
    pub pod_namespace: ::std::string::String,
    pub pod_uuid: ::std::string::String,
    pub volume_name: ::std::string::String,
    pub timestamp: i64,
    pub labels: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    pub cpu_usage_nano_cores: i64,
    pub cpu_usage_core_nano_seconds: i64,
    pub memory_available_bytes: i64,
    pub memory_usage_bytes: i64,
    pub memory_working_set_bytes: i64,
    pub memory_rss_bytes: i64,
    pub memory_page_faults: i32,
    pub memory_major_page_faults: i32,
    pub memory_usage: i32,
    pub network_rx_bytes: i64,
    pub network_rx_errors: i32,
    pub network_tx_bytes: i64,
    pub network_tx_errors: i32,
    pub fs_available_bytes: i64,
    pub fs_capacity_bytes: i64,
    pub fs_used_bytes: i64,
    pub fs_inodes_free: i64,
    pub fs_inodes: i64,
    pub fs_inodes_used: i64,
    pub disk_usage: i32,
    pub rlimit_maxpid: i32,
    pub rlimit_curproc: i32,
    pub ephemeral_storage_available_bytes: i64,
    pub ephemeral_storage_capacity_bytes: i64,
    pub ephemeral_storage_used_bytes: i64,
    pub ephemeral_storage_inodes_free: i64,
    pub ephemeral_storage_inodes: i64,
    pub ephemeral_storage_inodes_used: i64,
    pub process_count: i32,
    pub swap_usage_bytes: i64,
    pub swap_available_bytes: i64,
    pub swap_usage: i32,
    pub phase: ::std::string::String,
    pub pod_restart_count: i32,
    pub pod_uptime_seconds: i64,
    pub owner_references: ::protobuf::RepeatedField<OwnerReference>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a KubernetesMetrics {
    fn default() -> &'a KubernetesMetrics {
        <KubernetesMetrics as ::protobuf::Message>::default_instance()
    }
}

impl KubernetesMetrics {
    pub fn new() -> KubernetesMetrics {
        ::std::default::Default::default()
    }

    // string site_id = 32;


    pub fn get_site_id(&self) -> &str {
        &self.site_id
    }
    pub fn clear_site_id(&mut self) {
        self.site_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_site_id(&mut self, v: ::std::string::String) {
        self.site_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_site_id(&mut self) -> &mut ::std::string::String {
        &mut self.site_id
    }

    // Take field
    pub fn take_site_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.site_id, ::std::string::String::new())
    }

    // string node_name = 1;


    pub fn get_node_name(&self) -> &str {
        &self.node_name
    }
    pub fn clear_node_name(&mut self) {
        self.node_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_node_name(&mut self, v: ::std::string::String) {
        self.node_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_node_name(&mut self) -> &mut ::std::string::String {
        &mut self.node_name
    }

    // Take field
    pub fn take_node_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.node_name, ::std::string::String::new())
    }

    // string pod_name = 2;


    pub fn get_pod_name(&self) -> &str {
        &self.pod_name
    }
    pub fn clear_pod_name(&mut self) {
        self.pod_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_pod_name(&mut self, v: ::std::string::String) {
        self.pod_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pod_name(&mut self) -> &mut ::std::string::String {
        &mut self.pod_name
    }

    // Take field
    pub fn take_pod_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pod_name, ::std::string::String::new())
    }

    // string pod_namespace = 33;


    pub fn get_pod_namespace(&self) -> &str {
        &self.pod_namespace
    }
    pub fn clear_pod_namespace(&mut self) {
        self.pod_namespace.clear();
    }

    // Param is passed by value, moved
    pub fn set_pod_namespace(&mut self, v: ::std::string::String) {
        self.pod_namespace = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pod_namespace(&mut self) -> &mut ::std::string::String {
        &mut self.pod_namespace
    }

    // Take field
    pub fn take_pod_namespace(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pod_namespace, ::std::string::String::new())
    }

    // string pod_uuid = 34;


    pub fn get_pod_uuid(&self) -> &str {
        &self.pod_uuid
    }
    pub fn clear_pod_uuid(&mut self) {
        self.pod_uuid.clear();
    }

    // Param is passed by value, moved
    pub fn set_pod_uuid(&mut self, v: ::std::string::String) {
        self.pod_uuid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pod_uuid(&mut self) -> &mut ::std::string::String {
        &mut self.pod_uuid
    }

    // Take field
    pub fn take_pod_uuid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pod_uuid, ::std::string::String::new())
    }

    // string volume_name = 35;


    pub fn get_volume_name(&self) -> &str {
        &self.volume_name
    }
    pub fn clear_volume_name(&mut self) {
        self.volume_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_volume_name(&mut self, v: ::std::string::String) {
        self.volume_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_volume_name(&mut self) -> &mut ::std::string::String {
        &mut self.volume_name
    }

    // Take field
    pub fn take_volume_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.volume_name, ::std::string::String::new())
    }

    // int64 timestamp = 31;


    pub fn get_timestamp(&self) -> i64 {
        self.timestamp
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: i64) {
        self.timestamp = v;
    }

    // repeated .protocol.kubernetes.KubernetesMetrics.LabelsEntry labels = 41;


    pub fn get_labels(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.labels
    }
    pub fn clear_labels(&mut self) {
        self.labels.clear();
    }

    // Param is passed by value, moved
    pub fn set_labels(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.labels = v;
    }

    // Mutable pointer to the field.
    pub fn mut_labels(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.labels
    }

    // Take field
    pub fn take_labels(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.labels, ::std::collections::HashMap::new())
    }

    // int64 cpu_usage_nano_cores = 3;


    pub fn get_cpu_usage_nano_cores(&self) -> i64 {
        self.cpu_usage_nano_cores
    }
    pub fn clear_cpu_usage_nano_cores(&mut self) {
        self.cpu_usage_nano_cores = 0;
    }

    // Param is passed by value, moved
    pub fn set_cpu_usage_nano_cores(&mut self, v: i64) {
        self.cpu_usage_nano_cores = v;
    }

    // int64 cpu_usage_core_nano_seconds = 4;


    pub fn get_cpu_usage_core_nano_seconds(&self) -> i64 {
        self.cpu_usage_core_nano_seconds
    }
    pub fn clear_cpu_usage_core_nano_seconds(&mut self) {
        self.cpu_usage_core_nano_seconds = 0;
    }

    // Param is passed by value, moved
    pub fn set_cpu_usage_core_nano_seconds(&mut self, v: i64) {
        self.cpu_usage_core_nano_seconds = v;
    }

    // int64 memory_available_bytes = 5;


    pub fn get_memory_available_bytes(&self) -> i64 {
        self.memory_available_bytes
    }
    pub fn clear_memory_available_bytes(&mut self) {
        self.memory_available_bytes = 0;
    }

    // Param is passed by value, moved
    pub fn set_memory_available_bytes(&mut self, v: i64) {
        self.memory_available_bytes = v;
    }

    // int64 memory_usage_bytes = 6;


    pub fn get_memory_usage_bytes(&self) -> i64 {
        self.memory_usage_bytes
    }
    pub fn clear_memory_usage_bytes(&mut self) {
        self.memory_usage_bytes = 0;
    }

    // Param is passed by value, moved
    pub fn set_memory_usage_bytes(&mut self, v: i64) {
        self.memory_usage_bytes = v;
    }

    // int64 memory_working_set_bytes = 7;


    pub fn get_memory_working_set_bytes(&self) -> i64 {
        self.memory_working_set_bytes
    }
    pub fn clear_memory_working_set_bytes(&mut self) {
        self.memory_working_set_bytes = 0;
    }

    // Param is passed by value, moved
    pub fn set_memory_working_set_bytes(&mut self, v: i64) {
        self.memory_working_set_bytes = v;
    }

    // int64 memory_rss_bytes = 8;


    pub fn get_memory_rss_bytes(&self) -> i64 {
        self.memory_rss_bytes
    }
    pub fn clear_memory_rss_bytes(&mut self) {
        self.memory_rss_bytes = 0;
    }

    // Param is passed by value, moved
    pub fn set_memory_rss_bytes(&mut self, v: i64) {
        self.memory_rss_bytes = v;
    }

    // int32 memory_page_faults = 9;


    pub fn get_memory_page_faults(&self) -> i32 {
        self.memory_page_faults
    }
    pub fn clear_memory_page_faults(&mut self) {
        self.memory_page_faults = 0;
    }

    // Param is passed by value, moved
    pub fn set_memory_page_faults(&mut self, v: i32) {
        self.memory_page_faults = v;
    }

    // int32 memory_major_page_faults = 10;


    pub fn get_memory_major_page_faults(&self) -> i32 {
        self.memory_major_page_faults
    }
    pub fn clear_memory_major_page_faults(&mut self) {
        self.memory_major_page_faults = 0;
    }

    // Param is passed by value, moved
    pub fn set_memory_major_page_faults(&mut self, v: i32) {
        self.memory_major_page_faults = v;
    }

    // int32 memory_usage = 38;


    pub fn get_memory_usage(&self) -> i32 {
        self.memory_usage
    }
    pub fn clear_memory_usage(&mut self) {
        self.memory_usage = 0;
    }

    // Param is passed by value, moved
    pub fn set_memory_usage(&mut self, v: i32) {
        self.memory_usage = v;
    }

    // int64 network_rx_bytes = 11;


    pub fn get_network_rx_bytes(&self) -> i64 {
        self.network_rx_bytes
    }
    pub fn clear_network_rx_bytes(&mut self) {
        self.network_rx_bytes = 0;
    }

    // Param is passed by value, moved
    pub fn set_network_rx_bytes(&mut self, v: i64) {
        self.network_rx_bytes = v;
    }

    // int32 network_rx_errors = 12;


    pub fn get_network_rx_errors(&self) -> i32 {
        self.network_rx_errors
    }
    pub fn clear_network_rx_errors(&mut self) {
        self.network_rx_errors = 0;
    }

    // Param is passed by value, moved
    pub fn set_network_rx_errors(&mut self, v: i32) {
        self.network_rx_errors = v;
    }

    // int64 network_tx_bytes = 13;


    pub fn get_network_tx_bytes(&self) -> i64 {
        self.network_tx_bytes
    }
    pub fn clear_network_tx_bytes(&mut self) {
        self.network_tx_bytes = 0;
    }

    // Param is passed by value, moved
    pub fn set_network_tx_bytes(&mut self, v: i64) {
        self.network_tx_bytes = v;
    }

    // int32 network_tx_errors = 14;


    pub fn get_network_tx_errors(&self) -> i32 {
        self.network_tx_errors
    }
    pub fn clear_network_tx_errors(&mut self) {
        self.network_tx_errors = 0;
    }

    // Param is passed by value, moved
    pub fn set_network_tx_errors(&mut self, v: i32) {
        self.network_tx_errors = v;
    }

    // int64 fs_available_bytes = 15;


    pub fn get_fs_available_bytes(&self) -> i64 {
        self.fs_available_bytes
    }
    pub fn clear_fs_available_bytes(&mut self) {
        self.fs_available_bytes = 0;
    }

    // Param is passed by value, moved
    pub fn set_fs_available_bytes(&mut self, v: i64) {
        self.fs_available_bytes = v;
    }

    // int64 fs_capacity_bytes = 16;


    pub fn get_fs_capacity_bytes(&self) -> i64 {
        self.fs_capacity_bytes
    }
    pub fn clear_fs_capacity_bytes(&mut self) {
        self.fs_capacity_bytes = 0;
    }

    // Param is passed by value, moved
    pub fn set_fs_capacity_bytes(&mut self, v: i64) {
        self.fs_capacity_bytes = v;
    }

    // int64 fs_used_bytes = 17;


    pub fn get_fs_used_bytes(&self) -> i64 {
        self.fs_used_bytes
    }
    pub fn clear_fs_used_bytes(&mut self) {
        self.fs_used_bytes = 0;
    }

    // Param is passed by value, moved
    pub fn set_fs_used_bytes(&mut self, v: i64) {
        self.fs_used_bytes = v;
    }

    // int64 fs_inodes_free = 18;


    pub fn get_fs_inodes_free(&self) -> i64 {
        self.fs_inodes_free
    }
    pub fn clear_fs_inodes_free(&mut self) {
        self.fs_inodes_free = 0;
    }

    // Param is passed by value, moved
    pub fn set_fs_inodes_free(&mut self, v: i64) {
        self.fs_inodes_free = v;
    }

    // int64 fs_inodes = 19;


    pub fn get_fs_inodes(&self) -> i64 {
        self.fs_inodes
    }
    pub fn clear_fs_inodes(&mut self) {
        self.fs_inodes = 0;
    }

    // Param is passed by value, moved
    pub fn set_fs_inodes(&mut self, v: i64) {
        self.fs_inodes = v;
    }

    // int64 fs_inodes_used = 20;


    pub fn get_fs_inodes_used(&self) -> i64 {
        self.fs_inodes_used
    }
    pub fn clear_fs_inodes_used(&mut self) {
        self.fs_inodes_used = 0;
    }

    // Param is passed by value, moved
    pub fn set_fs_inodes_used(&mut self, v: i64) {
        self.fs_inodes_used = v;
    }

    // int32 disk_usage = 37;


    pub fn get_disk_usage(&self) -> i32 {
        self.disk_usage
    }
    pub fn clear_disk_usage(&mut self) {
        self.disk_usage = 0;
    }

    // Param is passed by value, moved
    pub fn set_disk_usage(&mut self, v: i32) {
        self.disk_usage = v;
    }

    // int32 rlimit_maxpid = 21;


    pub fn get_rlimit_maxpid(&self) -> i32 {
        self.rlimit_maxpid
    }
    pub fn clear_rlimit_maxpid(&mut self) {
        self.rlimit_maxpid = 0;
    }

    // Param is passed by value, moved
    pub fn set_rlimit_maxpid(&mut self, v: i32) {
        self.rlimit_maxpid = v;
    }

    // int32 rlimit_curproc = 22;


    pub fn get_rlimit_curproc(&self) -> i32 {
        self.rlimit_curproc
    }
    pub fn clear_rlimit_curproc(&mut self) {
        self.rlimit_curproc = 0;
    }

    // Param is passed by value, moved
    pub fn set_rlimit_curproc(&mut self, v: i32) {
        self.rlimit_curproc = v;
    }

    // int64 ephemeral_storage_available_bytes = 23;


    pub fn get_ephemeral_storage_available_bytes(&self) -> i64 {
        self.ephemeral_storage_available_bytes
    }
    pub fn clear_ephemeral_storage_available_bytes(&mut self) {
        self.ephemeral_storage_available_bytes = 0;
    }

    // Param is passed by value, moved
    pub fn set_ephemeral_storage_available_bytes(&mut self, v: i64) {
        self.ephemeral_storage_available_bytes = v;
    }

    // int64 ephemeral_storage_capacity_bytes = 24;


    pub fn get_ephemeral_storage_capacity_bytes(&self) -> i64 {
        self.ephemeral_storage_capacity_bytes
    }
    pub fn clear_ephemeral_storage_capacity_bytes(&mut self) {
        self.ephemeral_storage_capacity_bytes = 0;
    }

    // Param is passed by value, moved
    pub fn set_ephemeral_storage_capacity_bytes(&mut self, v: i64) {
        self.ephemeral_storage_capacity_bytes = v;
    }

    // int64 ephemeral_storage_used_bytes = 25;


    pub fn get_ephemeral_storage_used_bytes(&self) -> i64 {
        self.ephemeral_storage_used_bytes
    }
    pub fn clear_ephemeral_storage_used_bytes(&mut self) {
        self.ephemeral_storage_used_bytes = 0;
    }

    // Param is passed by value, moved
    pub fn set_ephemeral_storage_used_bytes(&mut self, v: i64) {
        self.ephemeral_storage_used_bytes = v;
    }

    // int64 ephemeral_storage_inodes_free = 26;


    pub fn get_ephemeral_storage_inodes_free(&self) -> i64 {
        self.ephemeral_storage_inodes_free
    }
    pub fn clear_ephemeral_storage_inodes_free(&mut self) {
        self.ephemeral_storage_inodes_free = 0;
    }

    // Param is passed by value, moved
    pub fn set_ephemeral_storage_inodes_free(&mut self, v: i64) {
        self.ephemeral_storage_inodes_free = v;
    }

    // int64 ephemeral_storage_inodes = 27;


    pub fn get_ephemeral_storage_inodes(&self) -> i64 {
        self.ephemeral_storage_inodes
    }
    pub fn clear_ephemeral_storage_inodes(&mut self) {
        self.ephemeral_storage_inodes = 0;
    }

    // Param is passed by value, moved
    pub fn set_ephemeral_storage_inodes(&mut self, v: i64) {
        self.ephemeral_storage_inodes = v;
    }

    // int64 ephemeral_storage_inodes_used = 28;


    pub fn get_ephemeral_storage_inodes_used(&self) -> i64 {
        self.ephemeral_storage_inodes_used
    }
    pub fn clear_ephemeral_storage_inodes_used(&mut self) {
        self.ephemeral_storage_inodes_used = 0;
    }

    // Param is passed by value, moved
    pub fn set_ephemeral_storage_inodes_used(&mut self, v: i64) {
        self.ephemeral_storage_inodes_used = v;
    }

    // int32 process_count = 29;


    pub fn get_process_count(&self) -> i32 {
        self.process_count
    }
    pub fn clear_process_count(&mut self) {
        self.process_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_process_count(&mut self, v: i32) {
        self.process_count = v;
    }

    // int64 swap_usage_bytes = 30;


    pub fn get_swap_usage_bytes(&self) -> i64 {
        self.swap_usage_bytes
    }
    pub fn clear_swap_usage_bytes(&mut self) {
        self.swap_usage_bytes = 0;
    }

    // Param is passed by value, moved
    pub fn set_swap_usage_bytes(&mut self, v: i64) {
        self.swap_usage_bytes = v;
    }

    // int64 swap_available_bytes = 36;


    pub fn get_swap_available_bytes(&self) -> i64 {
        self.swap_available_bytes
    }
    pub fn clear_swap_available_bytes(&mut self) {
        self.swap_available_bytes = 0;
    }

    // Param is passed by value, moved
    pub fn set_swap_available_bytes(&mut self, v: i64) {
        self.swap_available_bytes = v;
    }

    // int32 swap_usage = 39;


    pub fn get_swap_usage(&self) -> i32 {
        self.swap_usage
    }
    pub fn clear_swap_usage(&mut self) {
        self.swap_usage = 0;
    }

    // Param is passed by value, moved
    pub fn set_swap_usage(&mut self, v: i32) {
        self.swap_usage = v;
    }

    // string phase = 40;


    pub fn get_phase(&self) -> &str {
        &self.phase
    }
    pub fn clear_phase(&mut self) {
        self.phase.clear();
    }

    // Param is passed by value, moved
    pub fn set_phase(&mut self, v: ::std::string::String) {
        self.phase = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_phase(&mut self) -> &mut ::std::string::String {
        &mut self.phase
    }

    // Take field
    pub fn take_phase(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.phase, ::std::string::String::new())
    }

    // int32 pod_restart_count = 42;


    pub fn get_pod_restart_count(&self) -> i32 {
        self.pod_restart_count
    }
    pub fn clear_pod_restart_count(&mut self) {
        self.pod_restart_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_pod_restart_count(&mut self, v: i32) {
        self.pod_restart_count = v;
    }

    // int64 pod_uptime_seconds = 43;


    pub fn get_pod_uptime_seconds(&self) -> i64 {
        self.pod_uptime_seconds
    }
    pub fn clear_pod_uptime_seconds(&mut self) {
        self.pod_uptime_seconds = 0;
    }

    // Param is passed by value, moved
    pub fn set_pod_uptime_seconds(&mut self, v: i64) {
        self.pod_uptime_seconds = v;
    }

    // repeated .protocol.kubernetes.OwnerReference owner_references = 44;


    pub fn get_owner_references(&self) -> &[OwnerReference] {
        &self.owner_references
    }
    pub fn clear_owner_references(&mut self) {
        self.owner_references.clear();
    }

    // Param is passed by value, moved
    pub fn set_owner_references(&mut self, v: ::protobuf::RepeatedField<OwnerReference>) {
        self.owner_references = v;
    }

    // Mutable pointer to the field.
    pub fn mut_owner_references(&mut self) -> &mut ::protobuf::RepeatedField<OwnerReference> {
        &mut self.owner_references
    }

    // Take field
    pub fn take_owner_references(&mut self) -> ::protobuf::RepeatedField<OwnerReference> {
        ::std::mem::replace(&mut self.owner_references, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for KubernetesMetrics {
    fn is_initialized(&self) -> bool {
        for v in &self.owner_references {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                32 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.site_id)?;
                },
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.node_name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pod_name)?;
                },
                33 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pod_namespace)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pod_uuid)?;
                },
                35 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.volume_name)?;
                },
                31 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.timestamp = tmp;
                },
                41 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.labels)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.cpu_usage_nano_cores = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.cpu_usage_core_nano_seconds = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.memory_available_bytes = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.memory_usage_bytes = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.memory_working_set_bytes = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.memory_rss_bytes = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.memory_page_faults = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.memory_major_page_faults = tmp;
                },
                38 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.memory_usage = tmp;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.network_rx_bytes = tmp;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.network_rx_errors = tmp;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.network_tx_bytes = tmp;
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.network_tx_errors = tmp;
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.fs_available_bytes = tmp;
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.fs_capacity_bytes = tmp;
                },
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.fs_used_bytes = tmp;
                },
                18 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.fs_inodes_free = tmp;
                },
                19 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.fs_inodes = tmp;
                },
                20 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.fs_inodes_used = tmp;
                },
                37 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.disk_usage = tmp;
                },
                21 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.rlimit_maxpid = tmp;
                },
                22 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.rlimit_curproc = tmp;
                },
                23 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.ephemeral_storage_available_bytes = tmp;
                },
                24 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.ephemeral_storage_capacity_bytes = tmp;
                },
                25 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.ephemeral_storage_used_bytes = tmp;
                },
                26 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.ephemeral_storage_inodes_free = tmp;
                },
                27 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.ephemeral_storage_inodes = tmp;
                },
                28 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.ephemeral_storage_inodes_used = tmp;
                },
                29 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.process_count = tmp;
                },
                30 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.swap_usage_bytes = tmp;
                },
                36 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.swap_available_bytes = tmp;
                },
                39 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.swap_usage = tmp;
                },
                40 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.phase)?;
                },
                42 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.pod_restart_count = tmp;
                },
                43 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.pod_uptime_seconds = tmp;
                },
                44 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.owner_references)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.site_id.is_empty() {
            my_size += ::protobuf::rt::string_size(32, &self.site_id);
        }
        if !self.node_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.node_name);
        }
        if !self.pod_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.pod_name);
        }
        if !self.pod_namespace.is_empty() {
            my_size += ::protobuf::rt::string_size(33, &self.pod_namespace);
        }
        if !self.pod_uuid.is_empty() {
            my_size += ::protobuf::rt::string_size(34, &self.pod_uuid);
        }
        if !self.volume_name.is_empty() {
            my_size += ::protobuf::rt::string_size(35, &self.volume_name);
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::value_size(31, self.timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(41, &self.labels);
        if self.cpu_usage_nano_cores != 0 {
            my_size += ::protobuf::rt::value_size(3, self.cpu_usage_nano_cores, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.cpu_usage_core_nano_seconds != 0 {
            my_size += ::protobuf::rt::value_size(4, self.cpu_usage_core_nano_seconds, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.memory_available_bytes != 0 {
            my_size += ::protobuf::rt::value_size(5, self.memory_available_bytes, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.memory_usage_bytes != 0 {
            my_size += ::protobuf::rt::value_size(6, self.memory_usage_bytes, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.memory_working_set_bytes != 0 {
            my_size += ::protobuf::rt::value_size(7, self.memory_working_set_bytes, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.memory_rss_bytes != 0 {
            my_size += ::protobuf::rt::value_size(8, self.memory_rss_bytes, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.memory_page_faults != 0 {
            my_size += ::protobuf::rt::value_size(9, self.memory_page_faults, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.memory_major_page_faults != 0 {
            my_size += ::protobuf::rt::value_size(10, self.memory_major_page_faults, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.memory_usage != 0 {
            my_size += ::protobuf::rt::value_size(38, self.memory_usage, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.network_rx_bytes != 0 {
            my_size += ::protobuf::rt::value_size(11, self.network_rx_bytes, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.network_rx_errors != 0 {
            my_size += ::protobuf::rt::value_size(12, self.network_rx_errors, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.network_tx_bytes != 0 {
            my_size += ::protobuf::rt::value_size(13, self.network_tx_bytes, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.network_tx_errors != 0 {
            my_size += ::protobuf::rt::value_size(14, self.network_tx_errors, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.fs_available_bytes != 0 {
            my_size += ::protobuf::rt::value_size(15, self.fs_available_bytes, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.fs_capacity_bytes != 0 {
            my_size += ::protobuf::rt::value_size(16, self.fs_capacity_bytes, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.fs_used_bytes != 0 {
            my_size += ::protobuf::rt::value_size(17, self.fs_used_bytes, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.fs_inodes_free != 0 {
            my_size += ::protobuf::rt::value_size(18, self.fs_inodes_free, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.fs_inodes != 0 {
            my_size += ::protobuf::rt::value_size(19, self.fs_inodes, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.fs_inodes_used != 0 {
            my_size += ::protobuf::rt::value_size(20, self.fs_inodes_used, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.disk_usage != 0 {
            my_size += ::protobuf::rt::value_size(37, self.disk_usage, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.rlimit_maxpid != 0 {
            my_size += ::protobuf::rt::value_size(21, self.rlimit_maxpid, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.rlimit_curproc != 0 {
            my_size += ::protobuf::rt::value_size(22, self.rlimit_curproc, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.ephemeral_storage_available_bytes != 0 {
            my_size += ::protobuf::rt::value_size(23, self.ephemeral_storage_available_bytes, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.ephemeral_storage_capacity_bytes != 0 {
            my_size += ::protobuf::rt::value_size(24, self.ephemeral_storage_capacity_bytes, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.ephemeral_storage_used_bytes != 0 {
            my_size += ::protobuf::rt::value_size(25, self.ephemeral_storage_used_bytes, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.ephemeral_storage_inodes_free != 0 {
            my_size += ::protobuf::rt::value_size(26, self.ephemeral_storage_inodes_free, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.ephemeral_storage_inodes != 0 {
            my_size += ::protobuf::rt::value_size(27, self.ephemeral_storage_inodes, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.ephemeral_storage_inodes_used != 0 {
            my_size += ::protobuf::rt::value_size(28, self.ephemeral_storage_inodes_used, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.process_count != 0 {
            my_size += ::protobuf::rt::value_size(29, self.process_count, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.swap_usage_bytes != 0 {
            my_size += ::protobuf::rt::value_size(30, self.swap_usage_bytes, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.swap_available_bytes != 0 {
            my_size += ::protobuf::rt::value_size(36, self.swap_available_bytes, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.swap_usage != 0 {
            my_size += ::protobuf::rt::value_size(39, self.swap_usage, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.phase.is_empty() {
            my_size += ::protobuf::rt::string_size(40, &self.phase);
        }
        if self.pod_restart_count != 0 {
            my_size += ::protobuf::rt::value_size(42, self.pod_restart_count, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.pod_uptime_seconds != 0 {
            my_size += ::protobuf::rt::value_size(43, self.pod_uptime_seconds, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.owner_references {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.site_id.is_empty() {
            os.write_string(32, &self.site_id)?;
        }
        if !self.node_name.is_empty() {
            os.write_string(1, &self.node_name)?;
        }
        if !self.pod_name.is_empty() {
            os.write_string(2, &self.pod_name)?;
        }
        if !self.pod_namespace.is_empty() {
            os.write_string(33, &self.pod_namespace)?;
        }
        if !self.pod_uuid.is_empty() {
            os.write_string(34, &self.pod_uuid)?;
        }
        if !self.volume_name.is_empty() {
            os.write_string(35, &self.volume_name)?;
        }
        if self.timestamp != 0 {
            os.write_int64(31, self.timestamp)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(41, &self.labels, os)?;
        if self.cpu_usage_nano_cores != 0 {
            os.write_int64(3, self.cpu_usage_nano_cores)?;
        }
        if self.cpu_usage_core_nano_seconds != 0 {
            os.write_int64(4, self.cpu_usage_core_nano_seconds)?;
        }
        if self.memory_available_bytes != 0 {
            os.write_int64(5, self.memory_available_bytes)?;
        }
        if self.memory_usage_bytes != 0 {
            os.write_int64(6, self.memory_usage_bytes)?;
        }
        if self.memory_working_set_bytes != 0 {
            os.write_int64(7, self.memory_working_set_bytes)?;
        }
        if self.memory_rss_bytes != 0 {
            os.write_int64(8, self.memory_rss_bytes)?;
        }
        if self.memory_page_faults != 0 {
            os.write_int32(9, self.memory_page_faults)?;
        }
        if self.memory_major_page_faults != 0 {
            os.write_int32(10, self.memory_major_page_faults)?;
        }
        if self.memory_usage != 0 {
            os.write_int32(38, self.memory_usage)?;
        }
        if self.network_rx_bytes != 0 {
            os.write_int64(11, self.network_rx_bytes)?;
        }
        if self.network_rx_errors != 0 {
            os.write_int32(12, self.network_rx_errors)?;
        }
        if self.network_tx_bytes != 0 {
            os.write_int64(13, self.network_tx_bytes)?;
        }
        if self.network_tx_errors != 0 {
            os.write_int32(14, self.network_tx_errors)?;
        }
        if self.fs_available_bytes != 0 {
            os.write_int64(15, self.fs_available_bytes)?;
        }
        if self.fs_capacity_bytes != 0 {
            os.write_int64(16, self.fs_capacity_bytes)?;
        }
        if self.fs_used_bytes != 0 {
            os.write_int64(17, self.fs_used_bytes)?;
        }
        if self.fs_inodes_free != 0 {
            os.write_int64(18, self.fs_inodes_free)?;
        }
        if self.fs_inodes != 0 {
            os.write_int64(19, self.fs_inodes)?;
        }
        if self.fs_inodes_used != 0 {
            os.write_int64(20, self.fs_inodes_used)?;
        }
        if self.disk_usage != 0 {
            os.write_int32(37, self.disk_usage)?;
        }
        if self.rlimit_maxpid != 0 {
            os.write_int32(21, self.rlimit_maxpid)?;
        }
        if self.rlimit_curproc != 0 {
            os.write_int32(22, self.rlimit_curproc)?;
        }
        if self.ephemeral_storage_available_bytes != 0 {
            os.write_int64(23, self.ephemeral_storage_available_bytes)?;
        }
        if self.ephemeral_storage_capacity_bytes != 0 {
            os.write_int64(24, self.ephemeral_storage_capacity_bytes)?;
        }
        if self.ephemeral_storage_used_bytes != 0 {
            os.write_int64(25, self.ephemeral_storage_used_bytes)?;
        }
        if self.ephemeral_storage_inodes_free != 0 {
            os.write_int64(26, self.ephemeral_storage_inodes_free)?;
        }
        if self.ephemeral_storage_inodes != 0 {
            os.write_int64(27, self.ephemeral_storage_inodes)?;
        }
        if self.ephemeral_storage_inodes_used != 0 {
            os.write_int64(28, self.ephemeral_storage_inodes_used)?;
        }
        if self.process_count != 0 {
            os.write_int32(29, self.process_count)?;
        }
        if self.swap_usage_bytes != 0 {
            os.write_int64(30, self.swap_usage_bytes)?;
        }
        if self.swap_available_bytes != 0 {
            os.write_int64(36, self.swap_available_bytes)?;
        }
        if self.swap_usage != 0 {
            os.write_int32(39, self.swap_usage)?;
        }
        if !self.phase.is_empty() {
            os.write_string(40, &self.phase)?;
        }
        if self.pod_restart_count != 0 {
            os.write_int32(42, self.pod_restart_count)?;
        }
        if self.pod_uptime_seconds != 0 {
            os.write_int64(43, self.pod_uptime_seconds)?;
        }
        for v in &self.owner_references {
            os.write_tag(44, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> KubernetesMetrics {
        KubernetesMetrics::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "site_id",
                |m: &KubernetesMetrics| { &m.site_id },
                |m: &mut KubernetesMetrics| { &mut m.site_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "node_name",
                |m: &KubernetesMetrics| { &m.node_name },
                |m: &mut KubernetesMetrics| { &mut m.node_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pod_name",
                |m: &KubernetesMetrics| { &m.pod_name },
                |m: &mut KubernetesMetrics| { &mut m.pod_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pod_namespace",
                |m: &KubernetesMetrics| { &m.pod_namespace },
                |m: &mut KubernetesMetrics| { &mut m.pod_namespace },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pod_uuid",
                |m: &KubernetesMetrics| { &m.pod_uuid },
                |m: &mut KubernetesMetrics| { &mut m.pod_uuid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "volume_name",
                |m: &KubernetesMetrics| { &m.volume_name },
                |m: &mut KubernetesMetrics| { &mut m.volume_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "timestamp",
                |m: &KubernetesMetrics| { &m.timestamp },
                |m: &mut KubernetesMetrics| { &mut m.timestamp },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                "labels",
                |m: &KubernetesMetrics| { &m.labels },
                |m: &mut KubernetesMetrics| { &mut m.labels },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "cpu_usage_nano_cores",
                |m: &KubernetesMetrics| { &m.cpu_usage_nano_cores },
                |m: &mut KubernetesMetrics| { &mut m.cpu_usage_nano_cores },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "cpu_usage_core_nano_seconds",
                |m: &KubernetesMetrics| { &m.cpu_usage_core_nano_seconds },
                |m: &mut KubernetesMetrics| { &mut m.cpu_usage_core_nano_seconds },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "memory_available_bytes",
                |m: &KubernetesMetrics| { &m.memory_available_bytes },
                |m: &mut KubernetesMetrics| { &mut m.memory_available_bytes },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "memory_usage_bytes",
                |m: &KubernetesMetrics| { &m.memory_usage_bytes },
                |m: &mut KubernetesMetrics| { &mut m.memory_usage_bytes },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "memory_working_set_bytes",
                |m: &KubernetesMetrics| { &m.memory_working_set_bytes },
                |m: &mut KubernetesMetrics| { &mut m.memory_working_set_bytes },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "memory_rss_bytes",
                |m: &KubernetesMetrics| { &m.memory_rss_bytes },
                |m: &mut KubernetesMetrics| { &mut m.memory_rss_bytes },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "memory_page_faults",
                |m: &KubernetesMetrics| { &m.memory_page_faults },
                |m: &mut KubernetesMetrics| { &mut m.memory_page_faults },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "memory_major_page_faults",
                |m: &KubernetesMetrics| { &m.memory_major_page_faults },
                |m: &mut KubernetesMetrics| { &mut m.memory_major_page_faults },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "memory_usage",
                |m: &KubernetesMetrics| { &m.memory_usage },
                |m: &mut KubernetesMetrics| { &mut m.memory_usage },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "network_rx_bytes",
                |m: &KubernetesMetrics| { &m.network_rx_bytes },
                |m: &mut KubernetesMetrics| { &mut m.network_rx_bytes },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "network_rx_errors",
                |m: &KubernetesMetrics| { &m.network_rx_errors },
                |m: &mut KubernetesMetrics| { &mut m.network_rx_errors },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "network_tx_bytes",
                |m: &KubernetesMetrics| { &m.network_tx_bytes },
                |m: &mut KubernetesMetrics| { &mut m.network_tx_bytes },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "network_tx_errors",
                |m: &KubernetesMetrics| { &m.network_tx_errors },
                |m: &mut KubernetesMetrics| { &mut m.network_tx_errors },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "fs_available_bytes",
                |m: &KubernetesMetrics| { &m.fs_available_bytes },
                |m: &mut KubernetesMetrics| { &mut m.fs_available_bytes },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "fs_capacity_bytes",
                |m: &KubernetesMetrics| { &m.fs_capacity_bytes },
                |m: &mut KubernetesMetrics| { &mut m.fs_capacity_bytes },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "fs_used_bytes",
                |m: &KubernetesMetrics| { &m.fs_used_bytes },
                |m: &mut KubernetesMetrics| { &mut m.fs_used_bytes },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "fs_inodes_free",
                |m: &KubernetesMetrics| { &m.fs_inodes_free },
                |m: &mut KubernetesMetrics| { &mut m.fs_inodes_free },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "fs_inodes",
                |m: &KubernetesMetrics| { &m.fs_inodes },
                |m: &mut KubernetesMetrics| { &mut m.fs_inodes },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "fs_inodes_used",
                |m: &KubernetesMetrics| { &m.fs_inodes_used },
                |m: &mut KubernetesMetrics| { &mut m.fs_inodes_used },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "disk_usage",
                |m: &KubernetesMetrics| { &m.disk_usage },
                |m: &mut KubernetesMetrics| { &mut m.disk_usage },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "rlimit_maxpid",
                |m: &KubernetesMetrics| { &m.rlimit_maxpid },
                |m: &mut KubernetesMetrics| { &mut m.rlimit_maxpid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "rlimit_curproc",
                |m: &KubernetesMetrics| { &m.rlimit_curproc },
                |m: &mut KubernetesMetrics| { &mut m.rlimit_curproc },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "ephemeral_storage_available_bytes",
                |m: &KubernetesMetrics| { &m.ephemeral_storage_available_bytes },
                |m: &mut KubernetesMetrics| { &mut m.ephemeral_storage_available_bytes },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "ephemeral_storage_capacity_bytes",
                |m: &KubernetesMetrics| { &m.ephemeral_storage_capacity_bytes },
                |m: &mut KubernetesMetrics| { &mut m.ephemeral_storage_capacity_bytes },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "ephemeral_storage_used_bytes",
                |m: &KubernetesMetrics| { &m.ephemeral_storage_used_bytes },
                |m: &mut KubernetesMetrics| { &mut m.ephemeral_storage_used_bytes },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "ephemeral_storage_inodes_free",
                |m: &KubernetesMetrics| { &m.ephemeral_storage_inodes_free },
                |m: &mut KubernetesMetrics| { &mut m.ephemeral_storage_inodes_free },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "ephemeral_storage_inodes",
                |m: &KubernetesMetrics| { &m.ephemeral_storage_inodes },
                |m: &mut KubernetesMetrics| { &mut m.ephemeral_storage_inodes },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "ephemeral_storage_inodes_used",
                |m: &KubernetesMetrics| { &m.ephemeral_storage_inodes_used },
                |m: &mut KubernetesMetrics| { &mut m.ephemeral_storage_inodes_used },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "process_count",
                |m: &KubernetesMetrics| { &m.process_count },
                |m: &mut KubernetesMetrics| { &mut m.process_count },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "swap_usage_bytes",
                |m: &KubernetesMetrics| { &m.swap_usage_bytes },
                |m: &mut KubernetesMetrics| { &mut m.swap_usage_bytes },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "swap_available_bytes",
                |m: &KubernetesMetrics| { &m.swap_available_bytes },
                |m: &mut KubernetesMetrics| { &mut m.swap_available_bytes },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "swap_usage",
                |m: &KubernetesMetrics| { &m.swap_usage },
                |m: &mut KubernetesMetrics| { &mut m.swap_usage },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "phase",
                |m: &KubernetesMetrics| { &m.phase },
                |m: &mut KubernetesMetrics| { &mut m.phase },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "pod_restart_count",
                |m: &KubernetesMetrics| { &m.pod_restart_count },
                |m: &mut KubernetesMetrics| { &mut m.pod_restart_count },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "pod_uptime_seconds",
                |m: &KubernetesMetrics| { &m.pod_uptime_seconds },
                |m: &mut KubernetesMetrics| { &mut m.pod_uptime_seconds },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<OwnerReference>>(
                "owner_references",
                |m: &KubernetesMetrics| { &m.owner_references },
                |m: &mut KubernetesMetrics| { &mut m.owner_references },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<KubernetesMetrics>(
                "KubernetesMetrics",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static KubernetesMetrics {
        static instance: ::protobuf::rt::LazyV2<KubernetesMetrics> = ::protobuf::rt::LazyV2::INIT;
        instance.get(KubernetesMetrics::new)
    }
}

impl ::protobuf::Clear for KubernetesMetrics {
    fn clear(&mut self) {
        self.site_id.clear();
        self.node_name.clear();
        self.pod_name.clear();
        self.pod_namespace.clear();
        self.pod_uuid.clear();
        self.volume_name.clear();
        self.timestamp = 0;
        self.labels.clear();
        self.cpu_usage_nano_cores = 0;
        self.cpu_usage_core_nano_seconds = 0;
        self.memory_available_bytes = 0;
        self.memory_usage_bytes = 0;
        self.memory_working_set_bytes = 0;
        self.memory_rss_bytes = 0;
        self.memory_page_faults = 0;
        self.memory_major_page_faults = 0;
        self.memory_usage = 0;
        self.network_rx_bytes = 0;
        self.network_rx_errors = 0;
        self.network_tx_bytes = 0;
        self.network_tx_errors = 0;
        self.fs_available_bytes = 0;
        self.fs_capacity_bytes = 0;
        self.fs_used_bytes = 0;
        self.fs_inodes_free = 0;
        self.fs_inodes = 0;
        self.fs_inodes_used = 0;
        self.disk_usage = 0;
        self.rlimit_maxpid = 0;
        self.rlimit_curproc = 0;
        self.ephemeral_storage_available_bytes = 0;
        self.ephemeral_storage_capacity_bytes = 0;
        self.ephemeral_storage_used_bytes = 0;
        self.ephemeral_storage_inodes_free = 0;
        self.ephemeral_storage_inodes = 0;
        self.ephemeral_storage_inodes_used = 0;
        self.process_count = 0;
        self.swap_usage_bytes = 0;
        self.swap_available_bytes = 0;
        self.swap_usage = 0;
        self.phase.clear();
        self.pod_restart_count = 0;
        self.pod_uptime_seconds = 0;
        self.owner_references.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for KubernetesMetrics {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for KubernetesMetrics {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct OwnerReference {
    // message fields
    pub name: ::std::string::String,
    pub kind: ::std::string::String,
    pub namespace: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OwnerReference {
    fn default() -> &'a OwnerReference {
        <OwnerReference as ::protobuf::Message>::default_instance()
    }
}

impl OwnerReference {
    pub fn new() -> OwnerReference {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string kind = 2;


    pub fn get_kind(&self) -> &str {
        &self.kind
    }
    pub fn clear_kind(&mut self) {
        self.kind.clear();
    }

    // Param is passed by value, moved
    pub fn set_kind(&mut self, v: ::std::string::String) {
        self.kind = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_kind(&mut self) -> &mut ::std::string::String {
        &mut self.kind
    }

    // Take field
    pub fn take_kind(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.kind, ::std::string::String::new())
    }

    // string namespace = 3;


    pub fn get_namespace(&self) -> &str {
        &self.namespace
    }
    pub fn clear_namespace(&mut self) {
        self.namespace.clear();
    }

    // Param is passed by value, moved
    pub fn set_namespace(&mut self, v: ::std::string::String) {
        self.namespace = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_namespace(&mut self) -> &mut ::std::string::String {
        &mut self.namespace
    }

    // Take field
    pub fn take_namespace(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.namespace, ::std::string::String::new())
    }
}

impl ::protobuf::Message for OwnerReference {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.kind)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.namespace)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.kind.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.kind);
        }
        if !self.namespace.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.namespace);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.kind.is_empty() {
            os.write_string(2, &self.kind)?;
        }
        if !self.namespace.is_empty() {
            os.write_string(3, &self.namespace)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OwnerReference {
        OwnerReference::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &OwnerReference| { &m.name },
                |m: &mut OwnerReference| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "kind",
                |m: &OwnerReference| { &m.kind },
                |m: &mut OwnerReference| { &mut m.kind },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "namespace",
                |m: &OwnerReference| { &m.namespace },
                |m: &mut OwnerReference| { &mut m.namespace },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<OwnerReference>(
                "OwnerReference",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static OwnerReference {
        static instance: ::protobuf::rt::LazyV2<OwnerReference> = ::protobuf::rt::LazyV2::INIT;
        instance.get(OwnerReference::new)
    }
}

impl ::protobuf::Clear for OwnerReference {
    fn clear(&mut self) {
        self.name.clear();
        self.kind.clear();
        self.namespace.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OwnerReference {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OwnerReference {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x10kubernetes.proto\x12\x13protocol.kubernetes\"\x9d\x10\n\x11Kuberne\
    tesMetrics\x12\x17\n\x07site_id\x18\x20\x20\x01(\tR\x06siteId\x12\x1b\n\
    \tnode_name\x18\x01\x20\x01(\tR\x08nodeName\x12\x19\n\x08pod_name\x18\
    \x02\x20\x01(\tR\x07podName\x12#\n\rpod_namespace\x18!\x20\x01(\tR\x0cpo\
    dNamespace\x12\x19\n\x08pod_uuid\x18\"\x20\x01(\tR\x07podUuid\x12\x1f\n\
    \x0bvolume_name\x18#\x20\x01(\tR\nvolumeName\x12\x1c\n\ttimestamp\x18\
    \x1f\x20\x01(\x03R\ttimestamp\x12J\n\x06labels\x18)\x20\x03(\x0b22.proto\
    col.kubernetes.KubernetesMetrics.LabelsEntryR\x06labels\x12/\n\x14cpu_us\
    age_nano_cores\x18\x03\x20\x01(\x03R\x11cpuUsageNanoCores\x12<\n\x1bcpu_\
    usage_core_nano_seconds\x18\x04\x20\x01(\x03R\x17cpuUsageCoreNanoSeconds\
    \x124\n\x16memory_available_bytes\x18\x05\x20\x01(\x03R\x14memoryAvailab\
    leBytes\x12,\n\x12memory_usage_bytes\x18\x06\x20\x01(\x03R\x10memoryUsag\
    eBytes\x127\n\x18memory_working_set_bytes\x18\x07\x20\x01(\x03R\x15memor\
    yWorkingSetBytes\x12(\n\x10memory_rss_bytes\x18\x08\x20\x01(\x03R\x0emem\
    oryRssBytes\x12,\n\x12memory_page_faults\x18\t\x20\x01(\x05R\x10memoryPa\
    geFaults\x127\n\x18memory_major_page_faults\x18\n\x20\x01(\x05R\x15memor\
    yMajorPageFaults\x12!\n\x0cmemory_usage\x18&\x20\x01(\x05R\x0bmemoryUsag\
    e\x12(\n\x10network_rx_bytes\x18\x0b\x20\x01(\x03R\x0enetworkRxBytes\x12\
    *\n\x11network_rx_errors\x18\x0c\x20\x01(\x05R\x0fnetworkRxErrors\x12(\n\
    \x10network_tx_bytes\x18\r\x20\x01(\x03R\x0enetworkTxBytes\x12*\n\x11net\
    work_tx_errors\x18\x0e\x20\x01(\x05R\x0fnetworkTxErrors\x12,\n\x12fs_ava\
    ilable_bytes\x18\x0f\x20\x01(\x03R\x10fsAvailableBytes\x12*\n\x11fs_capa\
    city_bytes\x18\x10\x20\x01(\x03R\x0ffsCapacityBytes\x12\"\n\rfs_used_byt\
    es\x18\x11\x20\x01(\x03R\x0bfsUsedBytes\x12$\n\x0efs_inodes_free\x18\x12\
    \x20\x01(\x03R\x0cfsInodesFree\x12\x1b\n\tfs_inodes\x18\x13\x20\x01(\x03\
    R\x08fsInodes\x12$\n\x0efs_inodes_used\x18\x14\x20\x01(\x03R\x0cfsInodes\
    Used\x12\x1d\n\ndisk_usage\x18%\x20\x01(\x05R\tdiskUsage\x12#\n\rrlimit_\
    maxpid\x18\x15\x20\x01(\x05R\x0crlimitMaxpid\x12%\n\x0erlimit_curproc\
    \x18\x16\x20\x01(\x05R\rrlimitCurproc\x12I\n!ephemeral_storage_available\
    _bytes\x18\x17\x20\x01(\x03R\x1eephemeralStorageAvailableBytes\x12G\n\
    \x20ephemeral_storage_capacity_bytes\x18\x18\x20\x01(\x03R\x1dephemeralS\
    torageCapacityBytes\x12?\n\x1cephemeral_storage_used_bytes\x18\x19\x20\
    \x01(\x03R\x19ephemeralStorageUsedBytes\x12A\n\x1dephemeral_storage_inod\
    es_free\x18\x1a\x20\x01(\x03R\x1aephemeralStorageInodesFree\x128\n\x18ep\
    hemeral_storage_inodes\x18\x1b\x20\x01(\x03R\x16ephemeralStorageInodes\
    \x12A\n\x1dephemeral_storage_inodes_used\x18\x1c\x20\x01(\x03R\x1aepheme\
    ralStorageInodesUsed\x12#\n\rprocess_count\x18\x1d\x20\x01(\x05R\x0cproc\
    essCount\x12(\n\x10swap_usage_bytes\x18\x1e\x20\x01(\x03R\x0eswapUsageBy\
    tes\x120\n\x14swap_available_bytes\x18$\x20\x01(\x03R\x12swapAvailableBy\
    tes\x12\x1d\n\nswap_usage\x18'\x20\x01(\x05R\tswapUsage\x12\x14\n\x05pha\
    se\x18(\x20\x01(\tR\x05phase\x12*\n\x11pod_restart_count\x18*\x20\x01(\
    \x05R\x0fpodRestartCount\x12,\n\x12pod_uptime_seconds\x18+\x20\x01(\x03R\
    \x10podUptimeSeconds\x12N\n\x10owner_references\x18,\x20\x03(\x0b2#.prot\
    ocol.kubernetes.OwnerReferenceR\x0fownerReferences\x1a9\n\x0bLabelsEntry\
    \x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\
    \x20\x01(\tR\x05value:\x028\x01\"V\n\x0eOwnerReference\x12\x12\n\x04name\
    \x18\x01\x20\x01(\tR\x04name\x12\x12\n\x04kind\x18\x02\x20\x01(\tR\x04ki\
    nd\x12\x1c\n\tnamespace\x18\x03\x20\x01(\tR\tnamespaceJ\xf3\x14\n\x06\
    \x12\x04\0\06\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\
    \x03\x01\0\x1c\n\n\n\x02\x04\0\x12\x04\x03\00\x01\n\n\n\x03\x04\0\x01\
    \x12\x03\x03\x08\x19\n\x0b\n\x04\x04\0\x02\0\x12\x03\x04\x02\x16\n\x0c\n\
    \x05\x04\0\x02\0\x05\x12\x03\x04\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\
    \x03\x04\t\x10\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x04\x13\x15\n\x0b\n\
    \x04\x04\0\x02\x01\x12\x03\x05\x02\x17\n\x0c\n\x05\x04\0\x02\x01\x05\x12\
    \x03\x05\x02\x08\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x05\t\x12\n\x0c\n\
    \x05\x04\0\x02\x01\x03\x12\x03\x05\x15\x16\n\x0b\n\x04\x04\0\x02\x02\x12\
    \x03\x06\x02\x16\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x06\x02\x08\n\x0c\
    \n\x05\x04\0\x02\x02\x01\x12\x03\x06\t\x11\n\x0c\n\x05\x04\0\x02\x02\x03\
    \x12\x03\x06\x14\x15\n\x0b\n\x04\x04\0\x02\x03\x12\x03\x07\x02\x1c\n\x0c\
    \n\x05\x04\0\x02\x03\x05\x12\x03\x07\x02\x08\n\x0c\n\x05\x04\0\x02\x03\
    \x01\x12\x03\x07\t\x16\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x07\x19\x1b\
    \n\x0b\n\x04\x04\0\x02\x04\x12\x03\x08\x02\x17\n\x0c\n\x05\x04\0\x02\x04\
    \x05\x12\x03\x08\x02\x08\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03\x08\t\x11\
    \n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03\x08\x14\x16\n\x0b\n\x04\x04\0\x02\
    \x05\x12\x03\t\x02\x1a\n\x0c\n\x05\x04\0\x02\x05\x05\x12\x03\t\x02\x08\n\
    \x0c\n\x05\x04\0\x02\x05\x01\x12\x03\t\t\x14\n\x0c\n\x05\x04\0\x02\x05\
    \x03\x12\x03\t\x17\x19\n\x0b\n\x04\x04\0\x02\x06\x12\x03\n\x02\x17\n\x0c\
    \n\x05\x04\0\x02\x06\x05\x12\x03\n\x02\x07\n\x0c\n\x05\x04\0\x02\x06\x01\
    \x12\x03\n\x08\x11\n\x0c\n\x05\x04\0\x02\x06\x03\x12\x03\n\x14\x16\n\x0b\
    \n\x04\x04\0\x02\x07\x12\x03\x0b\x02\"\n\x0c\n\x05\x04\0\x02\x07\x06\x12\
    \x03\x0b\x02\x15\n\x0c\n\x05\x04\0\x02\x07\x01\x12\x03\x0b\x16\x1c\n\x0c\
    \n\x05\x04\0\x02\x07\x03\x12\x03\x0b\x1f!\n\x0b\n\x04\x04\0\x02\x08\x12\
    \x03\x0c\x02!\n\x0c\n\x05\x04\0\x02\x08\x05\x12\x03\x0c\x02\x07\n\x0c\n\
    \x05\x04\0\x02\x08\x01\x12\x03\x0c\x08\x1c\n\x0c\n\x05\x04\0\x02\x08\x03\
    \x12\x03\x0c\x1f\x20\n\x0b\n\x04\x04\0\x02\t\x12\x03\r\x02(\n\x0c\n\x05\
    \x04\0\x02\t\x05\x12\x03\r\x02\x07\n\x0c\n\x05\x04\0\x02\t\x01\x12\x03\r\
    \x08#\n\x0c\n\x05\x04\0\x02\t\x03\x12\x03\r&'\n\x0b\n\x04\x04\0\x02\n\
    \x12\x03\x0e\x02#\n\x0c\n\x05\x04\0\x02\n\x05\x12\x03\x0e\x02\x07\n\x0c\
    \n\x05\x04\0\x02\n\x01\x12\x03\x0e\x08\x1e\n\x0c\n\x05\x04\0\x02\n\x03\
    \x12\x03\x0e!\"\n\x0b\n\x04\x04\0\x02\x0b\x12\x03\x0f\x02\x1f\n\x0c\n\
    \x05\x04\0\x02\x0b\x05\x12\x03\x0f\x02\x07\n\x0c\n\x05\x04\0\x02\x0b\x01\
    \x12\x03\x0f\x08\x1a\n\x0c\n\x05\x04\0\x02\x0b\x03\x12\x03\x0f\x1d\x1e\n\
    \x0b\n\x04\x04\0\x02\x0c\x12\x03\x10\x02%\n\x0c\n\x05\x04\0\x02\x0c\x05\
    \x12\x03\x10\x02\x07\n\x0c\n\x05\x04\0\x02\x0c\x01\x12\x03\x10\x08\x20\n\
    \x0c\n\x05\x04\0\x02\x0c\x03\x12\x03\x10#$\n\x0b\n\x04\x04\0\x02\r\x12\
    \x03\x11\x02\x1d\n\x0c\n\x05\x04\0\x02\r\x05\x12\x03\x11\x02\x07\n\x0c\n\
    \x05\x04\0\x02\r\x01\x12\x03\x11\x08\x18\n\x0c\n\x05\x04\0\x02\r\x03\x12\
    \x03\x11\x1b\x1c\n\x0b\n\x04\x04\0\x02\x0e\x12\x03\x12\x02\x1f\n\x0c\n\
    \x05\x04\0\x02\x0e\x05\x12\x03\x12\x02\x07\n\x0c\n\x05\x04\0\x02\x0e\x01\
    \x12\x03\x12\x08\x1a\n\x0c\n\x05\x04\0\x02\x0e\x03\x12\x03\x12\x1d\x1e\n\
    \x0b\n\x04\x04\0\x02\x0f\x12\x03\x13\x02&\n\x0c\n\x05\x04\0\x02\x0f\x05\
    \x12\x03\x13\x02\x07\n\x0c\n\x05\x04\0\x02\x0f\x01\x12\x03\x13\x08\x20\n\
    \x0c\n\x05\x04\0\x02\x0f\x03\x12\x03\x13#%\n\x0b\n\x04\x04\0\x02\x10\x12\
    \x03\x14\x02\x1a\n\x0c\n\x05\x04\0\x02\x10\x05\x12\x03\x14\x02\x07\n\x0c\
    \n\x05\x04\0\x02\x10\x01\x12\x03\x14\x08\x14\n\x0c\n\x05\x04\0\x02\x10\
    \x03\x12\x03\x14\x17\x19\n\x0b\n\x04\x04\0\x02\x11\x12\x03\x15\x02\x1e\n\
    \x0c\n\x05\x04\0\x02\x11\x05\x12\x03\x15\x02\x07\n\x0c\n\x05\x04\0\x02\
    \x11\x01\x12\x03\x15\x08\x18\n\x0c\n\x05\x04\0\x02\x11\x03\x12\x03\x15\
    \x1b\x1d\n\x0b\n\x04\x04\0\x02\x12\x12\x03\x16\x02\x1f\n\x0c\n\x05\x04\0\
    \x02\x12\x05\x12\x03\x16\x02\x07\n\x0c\n\x05\x04\0\x02\x12\x01\x12\x03\
    \x16\x08\x19\n\x0c\n\x05\x04\0\x02\x12\x03\x12\x03\x16\x1c\x1e\n\x0b\n\
    \x04\x04\0\x02\x13\x12\x03\x17\x02\x1e\n\x0c\n\x05\x04\0\x02\x13\x05\x12\
    \x03\x17\x02\x07\n\x0c\n\x05\x04\0\x02\x13\x01\x12\x03\x17\x08\x18\n\x0c\
    \n\x05\x04\0\x02\x13\x03\x12\x03\x17\x1b\x1d\n\x0b\n\x04\x04\0\x02\x14\
    \x12\x03\x18\x02\x1f\n\x0c\n\x05\x04\0\x02\x14\x05\x12\x03\x18\x02\x07\n\
    \x0c\n\x05\x04\0\x02\x14\x01\x12\x03\x18\x08\x19\n\x0c\n\x05\x04\0\x02\
    \x14\x03\x12\x03\x18\x1c\x1e\n\x0b\n\x04\x04\0\x02\x15\x12\x03\x19\x02\
    \x20\n\x0c\n\x05\x04\0\x02\x15\x05\x12\x03\x19\x02\x07\n\x0c\n\x05\x04\0\
    \x02\x15\x01\x12\x03\x19\x08\x1a\n\x0c\n\x05\x04\0\x02\x15\x03\x12\x03\
    \x19\x1d\x1f\n\x0b\n\x04\x04\0\x02\x16\x12\x03\x1a\x02\x1f\n\x0c\n\x05\
    \x04\0\x02\x16\x05\x12\x03\x1a\x02\x07\n\x0c\n\x05\x04\0\x02\x16\x01\x12\
    \x03\x1a\x08\x19\n\x0c\n\x05\x04\0\x02\x16\x03\x12\x03\x1a\x1c\x1e\n\x0b\
    \n\x04\x04\0\x02\x17\x12\x03\x1b\x02\x1b\n\x0c\n\x05\x04\0\x02\x17\x05\
    \x12\x03\x1b\x02\x07\n\x0c\n\x05\x04\0\x02\x17\x01\x12\x03\x1b\x08\x15\n\
    \x0c\n\x05\x04\0\x02\x17\x03\x12\x03\x1b\x18\x1a\n\x0b\n\x04\x04\0\x02\
    \x18\x12\x03\x1c\x02\x1c\n\x0c\n\x05\x04\0\x02\x18\x05\x12\x03\x1c\x02\
    \x07\n\x0c\n\x05\x04\0\x02\x18\x01\x12\x03\x1c\x08\x16\n\x0c\n\x05\x04\0\
    \x02\x18\x03\x12\x03\x1c\x19\x1b\n\x0b\n\x04\x04\0\x02\x19\x12\x03\x1d\
    \x02\x17\n\x0c\n\x05\x04\0\x02\x19\x05\x12\x03\x1d\x02\x07\n\x0c\n\x05\
    \x04\0\x02\x19\x01\x12\x03\x1d\x08\x11\n\x0c\n\x05\x04\0\x02\x19\x03\x12\
    \x03\x1d\x14\x16\n\x0b\n\x04\x04\0\x02\x1a\x12\x03\x1e\x02\x1c\n\x0c\n\
    \x05\x04\0\x02\x1a\x05\x12\x03\x1e\x02\x07\n\x0c\n\x05\x04\0\x02\x1a\x01\
    \x12\x03\x1e\x08\x16\n\x0c\n\x05\x04\0\x02\x1a\x03\x12\x03\x1e\x19\x1b\n\
    \x0b\n\x04\x04\0\x02\x1b\x12\x03\x1f\x02\x18\n\x0c\n\x05\x04\0\x02\x1b\
    \x05\x12\x03\x1f\x02\x07\n\x0c\n\x05\x04\0\x02\x1b\x01\x12\x03\x1f\x08\
    \x12\n\x0c\n\x05\x04\0\x02\x1b\x03\x12\x03\x1f\x15\x17\n\x0b\n\x04\x04\0\
    \x02\x1c\x12\x03\x20\x02\x1b\n\x0c\n\x05\x04\0\x02\x1c\x05\x12\x03\x20\
    \x02\x07\n\x0c\n\x05\x04\0\x02\x1c\x01\x12\x03\x20\x08\x15\n\x0c\n\x05\
    \x04\0\x02\x1c\x03\x12\x03\x20\x18\x1a\n\x0b\n\x04\x04\0\x02\x1d\x12\x03\
    !\x02\x1c\n\x0c\n\x05\x04\0\x02\x1d\x05\x12\x03!\x02\x07\n\x0c\n\x05\x04\
    \0\x02\x1d\x01\x12\x03!\x08\x16\n\x0c\n\x05\x04\0\x02\x1d\x03\x12\x03!\
    \x19\x1b\n\x0b\n\x04\x04\0\x02\x1e\x12\x03\"\x02/\n\x0c\n\x05\x04\0\x02\
    \x1e\x05\x12\x03\"\x02\x07\n\x0c\n\x05\x04\0\x02\x1e\x01\x12\x03\"\x08)\
    \n\x0c\n\x05\x04\0\x02\x1e\x03\x12\x03\",.\n\x0b\n\x04\x04\0\x02\x1f\x12\
    \x03#\x02.\n\x0c\n\x05\x04\0\x02\x1f\x05\x12\x03#\x02\x07\n\x0c\n\x05\
    \x04\0\x02\x1f\x01\x12\x03#\x08(\n\x0c\n\x05\x04\0\x02\x1f\x03\x12\x03#+\
    -\n\x0b\n\x04\x04\0\x02\x20\x12\x03$\x02*\n\x0c\n\x05\x04\0\x02\x20\x05\
    \x12\x03$\x02\x07\n\x0c\n\x05\x04\0\x02\x20\x01\x12\x03$\x08$\n\x0c\n\
    \x05\x04\0\x02\x20\x03\x12\x03$')\n\x0b\n\x04\x04\0\x02!\x12\x03%\x02+\n\
    \x0c\n\x05\x04\0\x02!\x05\x12\x03%\x02\x07\n\x0c\n\x05\x04\0\x02!\x01\
    \x12\x03%\x08%\n\x0c\n\x05\x04\0\x02!\x03\x12\x03%(*\n\x0b\n\x04\x04\0\
    \x02\"\x12\x03&\x02&\n\x0c\n\x05\x04\0\x02\"\x05\x12\x03&\x02\x07\n\x0c\
    \n\x05\x04\0\x02\"\x01\x12\x03&\x08\x20\n\x0c\n\x05\x04\0\x02\"\x03\x12\
    \x03&#%\n\x0b\n\x04\x04\0\x02#\x12\x03'\x02+\n\x0c\n\x05\x04\0\x02#\x05\
    \x12\x03'\x02\x07\n\x0c\n\x05\x04\0\x02#\x01\x12\x03'\x08%\n\x0c\n\x05\
    \x04\0\x02#\x03\x12\x03'(*\n\x0b\n\x04\x04\0\x02$\x12\x03(\x02\x1b\n\x0c\
    \n\x05\x04\0\x02$\x05\x12\x03(\x02\x07\n\x0c\n\x05\x04\0\x02$\x01\x12\
    \x03(\x08\x15\n\x0c\n\x05\x04\0\x02$\x03\x12\x03(\x18\x1a\n\x0b\n\x04\
    \x04\0\x02%\x12\x03)\x02\x1e\n\x0c\n\x05\x04\0\x02%\x05\x12\x03)\x02\x07\
    \n\x0c\n\x05\x04\0\x02%\x01\x12\x03)\x08\x18\n\x0c\n\x05\x04\0\x02%\x03\
    \x12\x03)\x1b\x1d\n\x0b\n\x04\x04\0\x02&\x12\x03*\x02\"\n\x0c\n\x05\x04\
    \0\x02&\x05\x12\x03*\x02\x07\n\x0c\n\x05\x04\0\x02&\x01\x12\x03*\x08\x1c\
    \n\x0c\n\x05\x04\0\x02&\x03\x12\x03*\x1f!\n\x0b\n\x04\x04\0\x02'\x12\x03\
    +\x02\x18\n\x0c\n\x05\x04\0\x02'\x05\x12\x03+\x02\x07\n\x0c\n\x05\x04\0\
    \x02'\x01\x12\x03+\x08\x12\n\x0c\n\x05\x04\0\x02'\x03\x12\x03+\x15\x17\n\
    \x0b\n\x04\x04\0\x02(\x12\x03,\x02\x14\n\x0c\n\x05\x04\0\x02(\x05\x12\
    \x03,\x02\x08\n\x0c\n\x05\x04\0\x02(\x01\x12\x03,\t\x0e\n\x0c\n\x05\x04\
    \0\x02(\x03\x12\x03,\x11\x13\n\x0b\n\x04\x04\0\x02)\x12\x03-\x02\x1f\n\
    \x0c\n\x05\x04\0\x02)\x05\x12\x03-\x02\x07\n\x0c\n\x05\x04\0\x02)\x01\
    \x12\x03-\x08\x19\n\x0c\n\x05\x04\0\x02)\x03\x12\x03-\x1c\x1e\n\x0b\n\
    \x04\x04\0\x02*\x12\x03.\x02\x20\n\x0c\n\x05\x04\0\x02*\x05\x12\x03.\x02\
    \x07\n\x0c\n\x05\x04\0\x02*\x01\x12\x03.\x08\x1a\n\x0c\n\x05\x04\0\x02*\
    \x03\x12\x03.\x1d\x1f\n\x0b\n\x04\x04\0\x02+\x12\x03/\x020\n\x0c\n\x05\
    \x04\0\x02+\x04\x12\x03/\x02\n\n\x0c\n\x05\x04\0\x02+\x06\x12\x03/\x0b\
    \x19\n\x0c\n\x05\x04\0\x02+\x01\x12\x03/\x1a*\n\x0c\n\x05\x04\0\x02+\x03\
    \x12\x03/-/\n\n\n\x02\x04\x01\x12\x042\06\x01\n\n\n\x03\x04\x01\x01\x12\
    \x032\x08\x16\n\x0b\n\x04\x04\x01\x02\0\x12\x033\x02\x12\n\x0c\n\x05\x04\
    \x01\x02\0\x05\x12\x033\x02\x08\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x033\t\
    \r\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x033\x10\x11\n\x0b\n\x04\x04\x01\
    \x02\x01\x12\x034\x02\x12\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x034\x02\
    \x08\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x034\t\r\n\x0c\n\x05\x04\x01\
    \x02\x01\x03\x12\x034\x10\x11\n\x0b\n\x04\x04\x01\x02\x02\x12\x035\x02\
    \x17\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x035\x02\x08\n\x0c\n\x05\x04\
    \x01\x02\x02\x01\x12\x035\t\x12\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x035\
    \x15\x16b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
