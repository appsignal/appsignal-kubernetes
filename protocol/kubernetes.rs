// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `kubernetes.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protocol.kubernetes.KubernetesMetric)
pub struct KubernetesMetric {
    // message fields
    // @@protoc_insertion_point(field:protocol.kubernetes.KubernetesMetric.node_name)
    pub node_name: ::std::string::String,
    // @@protoc_insertion_point(field:protocol.kubernetes.KubernetesMetric.pod_name)
    pub pod_name: ::std::string::String,
    // @@protoc_insertion_point(field:protocol.kubernetes.KubernetesMetric.cpu_usage_nano_cores)
    pub cpu_usage_nano_cores: i64,
    // @@protoc_insertion_point(field:protocol.kubernetes.KubernetesMetric.cpu_usage_core_nano_seconds)
    pub cpu_usage_core_nano_seconds: i64,
    // @@protoc_insertion_point(field:protocol.kubernetes.KubernetesMetric.memory_available_bytes)
    pub memory_available_bytes: i64,
    // @@protoc_insertion_point(field:protocol.kubernetes.KubernetesMetric.memory_usage_bytes)
    pub memory_usage_bytes: i64,
    // @@protoc_insertion_point(field:protocol.kubernetes.KubernetesMetric.memory_working_set_bytes)
    pub memory_working_set_bytes: i64,
    // @@protoc_insertion_point(field:protocol.kubernetes.KubernetesMetric.memory_rss_bytes)
    pub memory_rss_bytes: i64,
    // @@protoc_insertion_point(field:protocol.kubernetes.KubernetesMetric.memory_page_faults)
    pub memory_page_faults: i64,
    // @@protoc_insertion_point(field:protocol.kubernetes.KubernetesMetric.memory_major_page_faults)
    pub memory_major_page_faults: i64,
    // @@protoc_insertion_point(field:protocol.kubernetes.KubernetesMetric.network_rx_bytes)
    pub network_rx_bytes: i64,
    // @@protoc_insertion_point(field:protocol.kubernetes.KubernetesMetric.network_rx_errors)
    pub network_rx_errors: i64,
    // @@protoc_insertion_point(field:protocol.kubernetes.KubernetesMetric.network_tx_bytes)
    pub network_tx_bytes: i64,
    // @@protoc_insertion_point(field:protocol.kubernetes.KubernetesMetric.network_tx_errors)
    pub network_tx_errors: i64,
    // @@protoc_insertion_point(field:protocol.kubernetes.KubernetesMetric.fs_available_bytes)
    pub fs_available_bytes: i64,
    // @@protoc_insertion_point(field:protocol.kubernetes.KubernetesMetric.fs_capacity_bytes)
    pub fs_capacity_bytes: i64,
    // @@protoc_insertion_point(field:protocol.kubernetes.KubernetesMetric.fs_used_bytes)
    pub fs_used_bytes: i64,
    // @@protoc_insertion_point(field:protocol.kubernetes.KubernetesMetric.fs_inodes_free)
    pub fs_inodes_free: i64,
    // @@protoc_insertion_point(field:protocol.kubernetes.KubernetesMetric.fs_inodes)
    pub fs_inodes: i64,
    // @@protoc_insertion_point(field:protocol.kubernetes.KubernetesMetric.fs_inodes_used)
    pub fs_inodes_used: i64,
    // @@protoc_insertion_point(field:protocol.kubernetes.KubernetesMetric.rlimit_maxpid)
    pub rlimit_maxpid: i64,
    // @@protoc_insertion_point(field:protocol.kubernetes.KubernetesMetric.rlimit_curproc)
    pub rlimit_curproc: i64,
    // @@protoc_insertion_point(field:protocol.kubernetes.KubernetesMetric.ephemeral_storage_available_bytes)
    pub ephemeral_storage_available_bytes: i64,
    // @@protoc_insertion_point(field:protocol.kubernetes.KubernetesMetric.ephemeral_storage_capacity_bytes)
    pub ephemeral_storage_capacity_bytes: i64,
    // @@protoc_insertion_point(field:protocol.kubernetes.KubernetesMetric.ephemeral_storage_used_bytes)
    pub ephemeral_storage_used_bytes: i64,
    // @@protoc_insertion_point(field:protocol.kubernetes.KubernetesMetric.ephemeral_storage_inodes_free)
    pub ephemeral_storage_inodes_free: i64,
    // @@protoc_insertion_point(field:protocol.kubernetes.KubernetesMetric.ephemeral_storage_inodes)
    pub ephemeral_storage_inodes: i64,
    // @@protoc_insertion_point(field:protocol.kubernetes.KubernetesMetric.ephemeral_storage_inodes_used)
    pub ephemeral_storage_inodes_used: i64,
    // @@protoc_insertion_point(field:protocol.kubernetes.KubernetesMetric.process_count)
    pub process_count: i64,
    // @@protoc_insertion_point(field:protocol.kubernetes.KubernetesMetric.swap_usage_bytes)
    pub swap_usage_bytes: i64,
    // special fields
    // @@protoc_insertion_point(special_field:protocol.kubernetes.KubernetesMetric.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a KubernetesMetric {
    fn default() -> &'a KubernetesMetric {
        <KubernetesMetric as ::protobuf::Message>::default_instance()
    }
}

impl KubernetesMetric {
    pub fn new() -> KubernetesMetric {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(30);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "node_name",
            |m: &KubernetesMetric| { &m.node_name },
            |m: &mut KubernetesMetric| { &mut m.node_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pod_name",
            |m: &KubernetesMetric| { &m.pod_name },
            |m: &mut KubernetesMetric| { &mut m.pod_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cpu_usage_nano_cores",
            |m: &KubernetesMetric| { &m.cpu_usage_nano_cores },
            |m: &mut KubernetesMetric| { &mut m.cpu_usage_nano_cores },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cpu_usage_core_nano_seconds",
            |m: &KubernetesMetric| { &m.cpu_usage_core_nano_seconds },
            |m: &mut KubernetesMetric| { &mut m.cpu_usage_core_nano_seconds },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "memory_available_bytes",
            |m: &KubernetesMetric| { &m.memory_available_bytes },
            |m: &mut KubernetesMetric| { &mut m.memory_available_bytes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "memory_usage_bytes",
            |m: &KubernetesMetric| { &m.memory_usage_bytes },
            |m: &mut KubernetesMetric| { &mut m.memory_usage_bytes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "memory_working_set_bytes",
            |m: &KubernetesMetric| { &m.memory_working_set_bytes },
            |m: &mut KubernetesMetric| { &mut m.memory_working_set_bytes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "memory_rss_bytes",
            |m: &KubernetesMetric| { &m.memory_rss_bytes },
            |m: &mut KubernetesMetric| { &mut m.memory_rss_bytes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "memory_page_faults",
            |m: &KubernetesMetric| { &m.memory_page_faults },
            |m: &mut KubernetesMetric| { &mut m.memory_page_faults },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "memory_major_page_faults",
            |m: &KubernetesMetric| { &m.memory_major_page_faults },
            |m: &mut KubernetesMetric| { &mut m.memory_major_page_faults },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "network_rx_bytes",
            |m: &KubernetesMetric| { &m.network_rx_bytes },
            |m: &mut KubernetesMetric| { &mut m.network_rx_bytes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "network_rx_errors",
            |m: &KubernetesMetric| { &m.network_rx_errors },
            |m: &mut KubernetesMetric| { &mut m.network_rx_errors },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "network_tx_bytes",
            |m: &KubernetesMetric| { &m.network_tx_bytes },
            |m: &mut KubernetesMetric| { &mut m.network_tx_bytes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "network_tx_errors",
            |m: &KubernetesMetric| { &m.network_tx_errors },
            |m: &mut KubernetesMetric| { &mut m.network_tx_errors },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "fs_available_bytes",
            |m: &KubernetesMetric| { &m.fs_available_bytes },
            |m: &mut KubernetesMetric| { &mut m.fs_available_bytes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "fs_capacity_bytes",
            |m: &KubernetesMetric| { &m.fs_capacity_bytes },
            |m: &mut KubernetesMetric| { &mut m.fs_capacity_bytes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "fs_used_bytes",
            |m: &KubernetesMetric| { &m.fs_used_bytes },
            |m: &mut KubernetesMetric| { &mut m.fs_used_bytes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "fs_inodes_free",
            |m: &KubernetesMetric| { &m.fs_inodes_free },
            |m: &mut KubernetesMetric| { &mut m.fs_inodes_free },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "fs_inodes",
            |m: &KubernetesMetric| { &m.fs_inodes },
            |m: &mut KubernetesMetric| { &mut m.fs_inodes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "fs_inodes_used",
            |m: &KubernetesMetric| { &m.fs_inodes_used },
            |m: &mut KubernetesMetric| { &mut m.fs_inodes_used },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "rlimit_maxpid",
            |m: &KubernetesMetric| { &m.rlimit_maxpid },
            |m: &mut KubernetesMetric| { &mut m.rlimit_maxpid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "rlimit_curproc",
            |m: &KubernetesMetric| { &m.rlimit_curproc },
            |m: &mut KubernetesMetric| { &mut m.rlimit_curproc },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ephemeral_storage_available_bytes",
            |m: &KubernetesMetric| { &m.ephemeral_storage_available_bytes },
            |m: &mut KubernetesMetric| { &mut m.ephemeral_storage_available_bytes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ephemeral_storage_capacity_bytes",
            |m: &KubernetesMetric| { &m.ephemeral_storage_capacity_bytes },
            |m: &mut KubernetesMetric| { &mut m.ephemeral_storage_capacity_bytes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ephemeral_storage_used_bytes",
            |m: &KubernetesMetric| { &m.ephemeral_storage_used_bytes },
            |m: &mut KubernetesMetric| { &mut m.ephemeral_storage_used_bytes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ephemeral_storage_inodes_free",
            |m: &KubernetesMetric| { &m.ephemeral_storage_inodes_free },
            |m: &mut KubernetesMetric| { &mut m.ephemeral_storage_inodes_free },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ephemeral_storage_inodes",
            |m: &KubernetesMetric| { &m.ephemeral_storage_inodes },
            |m: &mut KubernetesMetric| { &mut m.ephemeral_storage_inodes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ephemeral_storage_inodes_used",
            |m: &KubernetesMetric| { &m.ephemeral_storage_inodes_used },
            |m: &mut KubernetesMetric| { &mut m.ephemeral_storage_inodes_used },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "process_count",
            |m: &KubernetesMetric| { &m.process_count },
            |m: &mut KubernetesMetric| { &mut m.process_count },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "swap_usage_bytes",
            |m: &KubernetesMetric| { &m.swap_usage_bytes },
            |m: &mut KubernetesMetric| { &mut m.swap_usage_bytes },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<KubernetesMetric>(
            "KubernetesMetric",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for KubernetesMetric {
    const NAME: &'static str = "KubernetesMetric";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.node_name = is.read_string()?;
                },
                18 => {
                    self.pod_name = is.read_string()?;
                },
                24 => {
                    self.cpu_usage_nano_cores = is.read_int64()?;
                },
                32 => {
                    self.cpu_usage_core_nano_seconds = is.read_int64()?;
                },
                40 => {
                    self.memory_available_bytes = is.read_int64()?;
                },
                48 => {
                    self.memory_usage_bytes = is.read_int64()?;
                },
                56 => {
                    self.memory_working_set_bytes = is.read_int64()?;
                },
                64 => {
                    self.memory_rss_bytes = is.read_int64()?;
                },
                72 => {
                    self.memory_page_faults = is.read_int64()?;
                },
                80 => {
                    self.memory_major_page_faults = is.read_int64()?;
                },
                88 => {
                    self.network_rx_bytes = is.read_int64()?;
                },
                96 => {
                    self.network_rx_errors = is.read_int64()?;
                },
                104 => {
                    self.network_tx_bytes = is.read_int64()?;
                },
                112 => {
                    self.network_tx_errors = is.read_int64()?;
                },
                120 => {
                    self.fs_available_bytes = is.read_int64()?;
                },
                128 => {
                    self.fs_capacity_bytes = is.read_int64()?;
                },
                136 => {
                    self.fs_used_bytes = is.read_int64()?;
                },
                144 => {
                    self.fs_inodes_free = is.read_int64()?;
                },
                152 => {
                    self.fs_inodes = is.read_int64()?;
                },
                160 => {
                    self.fs_inodes_used = is.read_int64()?;
                },
                168 => {
                    self.rlimit_maxpid = is.read_int64()?;
                },
                176 => {
                    self.rlimit_curproc = is.read_int64()?;
                },
                184 => {
                    self.ephemeral_storage_available_bytes = is.read_int64()?;
                },
                192 => {
                    self.ephemeral_storage_capacity_bytes = is.read_int64()?;
                },
                200 => {
                    self.ephemeral_storage_used_bytes = is.read_int64()?;
                },
                208 => {
                    self.ephemeral_storage_inodes_free = is.read_int64()?;
                },
                216 => {
                    self.ephemeral_storage_inodes = is.read_int64()?;
                },
                224 => {
                    self.ephemeral_storage_inodes_used = is.read_int64()?;
                },
                232 => {
                    self.process_count = is.read_int64()?;
                },
                240 => {
                    self.swap_usage_bytes = is.read_int64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.node_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.node_name);
        }
        if !self.pod_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.pod_name);
        }
        if self.cpu_usage_nano_cores != 0 {
            my_size += ::protobuf::rt::int64_size(3, self.cpu_usage_nano_cores);
        }
        if self.cpu_usage_core_nano_seconds != 0 {
            my_size += ::protobuf::rt::int64_size(4, self.cpu_usage_core_nano_seconds);
        }
        if self.memory_available_bytes != 0 {
            my_size += ::protobuf::rt::int64_size(5, self.memory_available_bytes);
        }
        if self.memory_usage_bytes != 0 {
            my_size += ::protobuf::rt::int64_size(6, self.memory_usage_bytes);
        }
        if self.memory_working_set_bytes != 0 {
            my_size += ::protobuf::rt::int64_size(7, self.memory_working_set_bytes);
        }
        if self.memory_rss_bytes != 0 {
            my_size += ::protobuf::rt::int64_size(8, self.memory_rss_bytes);
        }
        if self.memory_page_faults != 0 {
            my_size += ::protobuf::rt::int64_size(9, self.memory_page_faults);
        }
        if self.memory_major_page_faults != 0 {
            my_size += ::protobuf::rt::int64_size(10, self.memory_major_page_faults);
        }
        if self.network_rx_bytes != 0 {
            my_size += ::protobuf::rt::int64_size(11, self.network_rx_bytes);
        }
        if self.network_rx_errors != 0 {
            my_size += ::protobuf::rt::int64_size(12, self.network_rx_errors);
        }
        if self.network_tx_bytes != 0 {
            my_size += ::protobuf::rt::int64_size(13, self.network_tx_bytes);
        }
        if self.network_tx_errors != 0 {
            my_size += ::protobuf::rt::int64_size(14, self.network_tx_errors);
        }
        if self.fs_available_bytes != 0 {
            my_size += ::protobuf::rt::int64_size(15, self.fs_available_bytes);
        }
        if self.fs_capacity_bytes != 0 {
            my_size += ::protobuf::rt::int64_size(16, self.fs_capacity_bytes);
        }
        if self.fs_used_bytes != 0 {
            my_size += ::protobuf::rt::int64_size(17, self.fs_used_bytes);
        }
        if self.fs_inodes_free != 0 {
            my_size += ::protobuf::rt::int64_size(18, self.fs_inodes_free);
        }
        if self.fs_inodes != 0 {
            my_size += ::protobuf::rt::int64_size(19, self.fs_inodes);
        }
        if self.fs_inodes_used != 0 {
            my_size += ::protobuf::rt::int64_size(20, self.fs_inodes_used);
        }
        if self.rlimit_maxpid != 0 {
            my_size += ::protobuf::rt::int64_size(21, self.rlimit_maxpid);
        }
        if self.rlimit_curproc != 0 {
            my_size += ::protobuf::rt::int64_size(22, self.rlimit_curproc);
        }
        if self.ephemeral_storage_available_bytes != 0 {
            my_size += ::protobuf::rt::int64_size(23, self.ephemeral_storage_available_bytes);
        }
        if self.ephemeral_storage_capacity_bytes != 0 {
            my_size += ::protobuf::rt::int64_size(24, self.ephemeral_storage_capacity_bytes);
        }
        if self.ephemeral_storage_used_bytes != 0 {
            my_size += ::protobuf::rt::int64_size(25, self.ephemeral_storage_used_bytes);
        }
        if self.ephemeral_storage_inodes_free != 0 {
            my_size += ::protobuf::rt::int64_size(26, self.ephemeral_storage_inodes_free);
        }
        if self.ephemeral_storage_inodes != 0 {
            my_size += ::protobuf::rt::int64_size(27, self.ephemeral_storage_inodes);
        }
        if self.ephemeral_storage_inodes_used != 0 {
            my_size += ::protobuf::rt::int64_size(28, self.ephemeral_storage_inodes_used);
        }
        if self.process_count != 0 {
            my_size += ::protobuf::rt::int64_size(29, self.process_count);
        }
        if self.swap_usage_bytes != 0 {
            my_size += ::protobuf::rt::int64_size(30, self.swap_usage_bytes);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.node_name.is_empty() {
            os.write_string(1, &self.node_name)?;
        }
        if !self.pod_name.is_empty() {
            os.write_string(2, &self.pod_name)?;
        }
        if self.cpu_usage_nano_cores != 0 {
            os.write_int64(3, self.cpu_usage_nano_cores)?;
        }
        if self.cpu_usage_core_nano_seconds != 0 {
            os.write_int64(4, self.cpu_usage_core_nano_seconds)?;
        }
        if self.memory_available_bytes != 0 {
            os.write_int64(5, self.memory_available_bytes)?;
        }
        if self.memory_usage_bytes != 0 {
            os.write_int64(6, self.memory_usage_bytes)?;
        }
        if self.memory_working_set_bytes != 0 {
            os.write_int64(7, self.memory_working_set_bytes)?;
        }
        if self.memory_rss_bytes != 0 {
            os.write_int64(8, self.memory_rss_bytes)?;
        }
        if self.memory_page_faults != 0 {
            os.write_int64(9, self.memory_page_faults)?;
        }
        if self.memory_major_page_faults != 0 {
            os.write_int64(10, self.memory_major_page_faults)?;
        }
        if self.network_rx_bytes != 0 {
            os.write_int64(11, self.network_rx_bytes)?;
        }
        if self.network_rx_errors != 0 {
            os.write_int64(12, self.network_rx_errors)?;
        }
        if self.network_tx_bytes != 0 {
            os.write_int64(13, self.network_tx_bytes)?;
        }
        if self.network_tx_errors != 0 {
            os.write_int64(14, self.network_tx_errors)?;
        }
        if self.fs_available_bytes != 0 {
            os.write_int64(15, self.fs_available_bytes)?;
        }
        if self.fs_capacity_bytes != 0 {
            os.write_int64(16, self.fs_capacity_bytes)?;
        }
        if self.fs_used_bytes != 0 {
            os.write_int64(17, self.fs_used_bytes)?;
        }
        if self.fs_inodes_free != 0 {
            os.write_int64(18, self.fs_inodes_free)?;
        }
        if self.fs_inodes != 0 {
            os.write_int64(19, self.fs_inodes)?;
        }
        if self.fs_inodes_used != 0 {
            os.write_int64(20, self.fs_inodes_used)?;
        }
        if self.rlimit_maxpid != 0 {
            os.write_int64(21, self.rlimit_maxpid)?;
        }
        if self.rlimit_curproc != 0 {
            os.write_int64(22, self.rlimit_curproc)?;
        }
        if self.ephemeral_storage_available_bytes != 0 {
            os.write_int64(23, self.ephemeral_storage_available_bytes)?;
        }
        if self.ephemeral_storage_capacity_bytes != 0 {
            os.write_int64(24, self.ephemeral_storage_capacity_bytes)?;
        }
        if self.ephemeral_storage_used_bytes != 0 {
            os.write_int64(25, self.ephemeral_storage_used_bytes)?;
        }
        if self.ephemeral_storage_inodes_free != 0 {
            os.write_int64(26, self.ephemeral_storage_inodes_free)?;
        }
        if self.ephemeral_storage_inodes != 0 {
            os.write_int64(27, self.ephemeral_storage_inodes)?;
        }
        if self.ephemeral_storage_inodes_used != 0 {
            os.write_int64(28, self.ephemeral_storage_inodes_used)?;
        }
        if self.process_count != 0 {
            os.write_int64(29, self.process_count)?;
        }
        if self.swap_usage_bytes != 0 {
            os.write_int64(30, self.swap_usage_bytes)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> KubernetesMetric {
        KubernetesMetric::new()
    }

    fn clear(&mut self) {
        self.node_name.clear();
        self.pod_name.clear();
        self.cpu_usage_nano_cores = 0;
        self.cpu_usage_core_nano_seconds = 0;
        self.memory_available_bytes = 0;
        self.memory_usage_bytes = 0;
        self.memory_working_set_bytes = 0;
        self.memory_rss_bytes = 0;
        self.memory_page_faults = 0;
        self.memory_major_page_faults = 0;
        self.network_rx_bytes = 0;
        self.network_rx_errors = 0;
        self.network_tx_bytes = 0;
        self.network_tx_errors = 0;
        self.fs_available_bytes = 0;
        self.fs_capacity_bytes = 0;
        self.fs_used_bytes = 0;
        self.fs_inodes_free = 0;
        self.fs_inodes = 0;
        self.fs_inodes_used = 0;
        self.rlimit_maxpid = 0;
        self.rlimit_curproc = 0;
        self.ephemeral_storage_available_bytes = 0;
        self.ephemeral_storage_capacity_bytes = 0;
        self.ephemeral_storage_used_bytes = 0;
        self.ephemeral_storage_inodes_free = 0;
        self.ephemeral_storage_inodes = 0;
        self.ephemeral_storage_inodes_used = 0;
        self.process_count = 0;
        self.swap_usage_bytes = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static KubernetesMetric {
        static instance: KubernetesMetric = KubernetesMetric {
            node_name: ::std::string::String::new(),
            pod_name: ::std::string::String::new(),
            cpu_usage_nano_cores: 0,
            cpu_usage_core_nano_seconds: 0,
            memory_available_bytes: 0,
            memory_usage_bytes: 0,
            memory_working_set_bytes: 0,
            memory_rss_bytes: 0,
            memory_page_faults: 0,
            memory_major_page_faults: 0,
            network_rx_bytes: 0,
            network_rx_errors: 0,
            network_tx_bytes: 0,
            network_tx_errors: 0,
            fs_available_bytes: 0,
            fs_capacity_bytes: 0,
            fs_used_bytes: 0,
            fs_inodes_free: 0,
            fs_inodes: 0,
            fs_inodes_used: 0,
            rlimit_maxpid: 0,
            rlimit_curproc: 0,
            ephemeral_storage_available_bytes: 0,
            ephemeral_storage_capacity_bytes: 0,
            ephemeral_storage_used_bytes: 0,
            ephemeral_storage_inodes_free: 0,
            ephemeral_storage_inodes: 0,
            ephemeral_storage_inodes_used: 0,
            process_count: 0,
            swap_usage_bytes: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for KubernetesMetric {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("KubernetesMetric").unwrap()).clone()
    }
}

impl ::std::fmt::Display for KubernetesMetric {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for KubernetesMetric {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x10kubernetes.proto\x12\x13protocol.kubernetes\"\xaa\x0b\n\x10Kuberne\
    tesMetric\x12\x1b\n\tnode_name\x18\x01\x20\x01(\tR\x08nodeName\x12\x19\n\
    \x08pod_name\x18\x02\x20\x01(\tR\x07podName\x12/\n\x14cpu_usage_nano_cor\
    es\x18\x03\x20\x01(\x03R\x11cpuUsageNanoCores\x12<\n\x1bcpu_usage_core_n\
    ano_seconds\x18\x04\x20\x01(\x03R\x17cpuUsageCoreNanoSeconds\x124\n\x16m\
    emory_available_bytes\x18\x05\x20\x01(\x03R\x14memoryAvailableBytes\x12,\
    \n\x12memory_usage_bytes\x18\x06\x20\x01(\x03R\x10memoryUsageBytes\x127\
    \n\x18memory_working_set_bytes\x18\x07\x20\x01(\x03R\x15memoryWorkingSet\
    Bytes\x12(\n\x10memory_rss_bytes\x18\x08\x20\x01(\x03R\x0ememoryRssBytes\
    \x12,\n\x12memory_page_faults\x18\t\x20\x01(\x03R\x10memoryPageFaults\
    \x127\n\x18memory_major_page_faults\x18\n\x20\x01(\x03R\x15memoryMajorPa\
    geFaults\x12(\n\x10network_rx_bytes\x18\x0b\x20\x01(\x03R\x0enetworkRxBy\
    tes\x12*\n\x11network_rx_errors\x18\x0c\x20\x01(\x03R\x0fnetworkRxErrors\
    \x12(\n\x10network_tx_bytes\x18\r\x20\x01(\x03R\x0enetworkTxBytes\x12*\n\
    \x11network_tx_errors\x18\x0e\x20\x01(\x03R\x0fnetworkTxErrors\x12,\n\
    \x12fs_available_bytes\x18\x0f\x20\x01(\x03R\x10fsAvailableBytes\x12*\n\
    \x11fs_capacity_bytes\x18\x10\x20\x01(\x03R\x0ffsCapacityBytes\x12\"\n\r\
    fs_used_bytes\x18\x11\x20\x01(\x03R\x0bfsUsedBytes\x12$\n\x0efs_inodes_f\
    ree\x18\x12\x20\x01(\x03R\x0cfsInodesFree\x12\x1b\n\tfs_inodes\x18\x13\
    \x20\x01(\x03R\x08fsInodes\x12$\n\x0efs_inodes_used\x18\x14\x20\x01(\x03\
    R\x0cfsInodesUsed\x12#\n\rrlimit_maxpid\x18\x15\x20\x01(\x03R\x0crlimitM\
    axpid\x12%\n\x0erlimit_curproc\x18\x16\x20\x01(\x03R\rrlimitCurproc\x12I\
    \n!ephemeral_storage_available_bytes\x18\x17\x20\x01(\x03R\x1eephemeralS\
    torageAvailableBytes\x12G\n\x20ephemeral_storage_capacity_bytes\x18\x18\
    \x20\x01(\x03R\x1dephemeralStorageCapacityBytes\x12?\n\x1cephemeral_stor\
    age_used_bytes\x18\x19\x20\x01(\x03R\x19ephemeralStorageUsedBytes\x12A\n\
    \x1dephemeral_storage_inodes_free\x18\x1a\x20\x01(\x03R\x1aephemeralStor\
    ageInodesFree\x128\n\x18ephemeral_storage_inodes\x18\x1b\x20\x01(\x03R\
    \x16ephemeralStorageInodes\x12A\n\x1dephemeral_storage_inodes_used\x18\
    \x1c\x20\x01(\x03R\x1aephemeralStorageInodesUsed\x12#\n\rprocess_count\
    \x18\x1d\x20\x01(\x03R\x0cprocessCount\x12(\n\x10swap_usage_bytes\x18\
    \x1e\x20\x01(\x03R\x0eswapUsageBytesJ\xa6\r\n\x06\x12\x04\0\0\"\x01\n\
    \x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x01\0\x1c\n\n\n\
    \x02\x04\0\x12\x04\x03\0\"\x01\n\n\n\x03\x04\0\x01\x12\x03\x03\x08\x18\n\
    \x0b\n\x04\x04\0\x02\0\x12\x03\x04\x02\x17\n\x0c\n\x05\x04\0\x02\0\x05\
    \x12\x03\x04\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x04\t\x12\n\x0c\
    \n\x05\x04\0\x02\0\x03\x12\x03\x04\x15\x16\n\x0b\n\x04\x04\0\x02\x01\x12\
    \x03\x05\x02\x16\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x05\x02\x08\n\x0c\
    \n\x05\x04\0\x02\x01\x01\x12\x03\x05\t\x11\n\x0c\n\x05\x04\0\x02\x01\x03\
    \x12\x03\x05\x14\x15\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x06\x02!\n\x0c\n\
    \x05\x04\0\x02\x02\x05\x12\x03\x06\x02\x07\n\x0c\n\x05\x04\0\x02\x02\x01\
    \x12\x03\x06\x08\x1c\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x06\x1f\x20\n\
    \x0b\n\x04\x04\0\x02\x03\x12\x03\x07\x02(\n\x0c\n\x05\x04\0\x02\x03\x05\
    \x12\x03\x07\x02\x07\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x07\x08#\n\
    \x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x07&'\n\x0b\n\x04\x04\0\x02\x04\x12\
    \x03\x08\x02#\n\x0c\n\x05\x04\0\x02\x04\x05\x12\x03\x08\x02\x07\n\x0c\n\
    \x05\x04\0\x02\x04\x01\x12\x03\x08\x08\x1e\n\x0c\n\x05\x04\0\x02\x04\x03\
    \x12\x03\x08!\"\n\x0b\n\x04\x04\0\x02\x05\x12\x03\t\x02\x1f\n\x0c\n\x05\
    \x04\0\x02\x05\x05\x12\x03\t\x02\x07\n\x0c\n\x05\x04\0\x02\x05\x01\x12\
    \x03\t\x08\x1a\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03\t\x1d\x1e\n\x0b\n\
    \x04\x04\0\x02\x06\x12\x03\n\x02%\n\x0c\n\x05\x04\0\x02\x06\x05\x12\x03\
    \n\x02\x07\n\x0c\n\x05\x04\0\x02\x06\x01\x12\x03\n\x08\x20\n\x0c\n\x05\
    \x04\0\x02\x06\x03\x12\x03\n#$\n\x0b\n\x04\x04\0\x02\x07\x12\x03\x0b\x02\
    \x1d\n\x0c\n\x05\x04\0\x02\x07\x05\x12\x03\x0b\x02\x07\n\x0c\n\x05\x04\0\
    \x02\x07\x01\x12\x03\x0b\x08\x18\n\x0c\n\x05\x04\0\x02\x07\x03\x12\x03\
    \x0b\x1b\x1c\n\x0b\n\x04\x04\0\x02\x08\x12\x03\x0c\x02\x1f\n\x0c\n\x05\
    \x04\0\x02\x08\x05\x12\x03\x0c\x02\x07\n\x0c\n\x05\x04\0\x02\x08\x01\x12\
    \x03\x0c\x08\x1a\n\x0c\n\x05\x04\0\x02\x08\x03\x12\x03\x0c\x1d\x1e\n\x0b\
    \n\x04\x04\0\x02\t\x12\x03\r\x02&\n\x0c\n\x05\x04\0\x02\t\x05\x12\x03\r\
    \x02\x07\n\x0c\n\x05\x04\0\x02\t\x01\x12\x03\r\x08\x20\n\x0c\n\x05\x04\0\
    \x02\t\x03\x12\x03\r#%\n\x0b\n\x04\x04\0\x02\n\x12\x03\x0e\x02\x1e\n\x0c\
    \n\x05\x04\0\x02\n\x05\x12\x03\x0e\x02\x07\n\x0c\n\x05\x04\0\x02\n\x01\
    \x12\x03\x0e\x08\x18\n\x0c\n\x05\x04\0\x02\n\x03\x12\x03\x0e\x1b\x1d\n\
    \x0b\n\x04\x04\0\x02\x0b\x12\x03\x0f\x02\x1f\n\x0c\n\x05\x04\0\x02\x0b\
    \x05\x12\x03\x0f\x02\x07\n\x0c\n\x05\x04\0\x02\x0b\x01\x12\x03\x0f\x08\
    \x19\n\x0c\n\x05\x04\0\x02\x0b\x03\x12\x03\x0f\x1c\x1e\n\x0b\n\x04\x04\0\
    \x02\x0c\x12\x03\x10\x02\x1e\n\x0c\n\x05\x04\0\x02\x0c\x05\x12\x03\x10\
    \x02\x07\n\x0c\n\x05\x04\0\x02\x0c\x01\x12\x03\x10\x08\x18\n\x0c\n\x05\
    \x04\0\x02\x0c\x03\x12\x03\x10\x1b\x1d\n\x0b\n\x04\x04\0\x02\r\x12\x03\
    \x11\x02\x1f\n\x0c\n\x05\x04\0\x02\r\x05\x12\x03\x11\x02\x07\n\x0c\n\x05\
    \x04\0\x02\r\x01\x12\x03\x11\x08\x19\n\x0c\n\x05\x04\0\x02\r\x03\x12\x03\
    \x11\x1c\x1e\n\x0b\n\x04\x04\0\x02\x0e\x12\x03\x12\x02\x20\n\x0c\n\x05\
    \x04\0\x02\x0e\x05\x12\x03\x12\x02\x07\n\x0c\n\x05\x04\0\x02\x0e\x01\x12\
    \x03\x12\x08\x1a\n\x0c\n\x05\x04\0\x02\x0e\x03\x12\x03\x12\x1d\x1f\n\x0b\
    \n\x04\x04\0\x02\x0f\x12\x03\x13\x02\x1f\n\x0c\n\x05\x04\0\x02\x0f\x05\
    \x12\x03\x13\x02\x07\n\x0c\n\x05\x04\0\x02\x0f\x01\x12\x03\x13\x08\x19\n\
    \x0c\n\x05\x04\0\x02\x0f\x03\x12\x03\x13\x1c\x1e\n\x0b\n\x04\x04\0\x02\
    \x10\x12\x03\x14\x02\x1b\n\x0c\n\x05\x04\0\x02\x10\x05\x12\x03\x14\x02\
    \x07\n\x0c\n\x05\x04\0\x02\x10\x01\x12\x03\x14\x08\x15\n\x0c\n\x05\x04\0\
    \x02\x10\x03\x12\x03\x14\x18\x1a\n\x0b\n\x04\x04\0\x02\x11\x12\x03\x15\
    \x02\x1c\n\x0c\n\x05\x04\0\x02\x11\x05\x12\x03\x15\x02\x07\n\x0c\n\x05\
    \x04\0\x02\x11\x01\x12\x03\x15\x08\x16\n\x0c\n\x05\x04\0\x02\x11\x03\x12\
    \x03\x15\x19\x1b\n\x0b\n\x04\x04\0\x02\x12\x12\x03\x16\x02\x17\n\x0c\n\
    \x05\x04\0\x02\x12\x05\x12\x03\x16\x02\x07\n\x0c\n\x05\x04\0\x02\x12\x01\
    \x12\x03\x16\x08\x11\n\x0c\n\x05\x04\0\x02\x12\x03\x12\x03\x16\x14\x16\n\
    \x0b\n\x04\x04\0\x02\x13\x12\x03\x17\x02\x1c\n\x0c\n\x05\x04\0\x02\x13\
    \x05\x12\x03\x17\x02\x07\n\x0c\n\x05\x04\0\x02\x13\x01\x12\x03\x17\x08\
    \x16\n\x0c\n\x05\x04\0\x02\x13\x03\x12\x03\x17\x19\x1b\n\x0b\n\x04\x04\0\
    \x02\x14\x12\x03\x18\x02\x1b\n\x0c\n\x05\x04\0\x02\x14\x05\x12\x03\x18\
    \x02\x07\n\x0c\n\x05\x04\0\x02\x14\x01\x12\x03\x18\x08\x15\n\x0c\n\x05\
    \x04\0\x02\x14\x03\x12\x03\x18\x18\x1a\n\x0b\n\x04\x04\0\x02\x15\x12\x03\
    \x19\x02\x1c\n\x0c\n\x05\x04\0\x02\x15\x05\x12\x03\x19\x02\x07\n\x0c\n\
    \x05\x04\0\x02\x15\x01\x12\x03\x19\x08\x16\n\x0c\n\x05\x04\0\x02\x15\x03\
    \x12\x03\x19\x19\x1b\n\x0b\n\x04\x04\0\x02\x16\x12\x03\x1a\x02/\n\x0c\n\
    \x05\x04\0\x02\x16\x05\x12\x03\x1a\x02\x07\n\x0c\n\x05\x04\0\x02\x16\x01\
    \x12\x03\x1a\x08)\n\x0c\n\x05\x04\0\x02\x16\x03\x12\x03\x1a,.\n\x0b\n\
    \x04\x04\0\x02\x17\x12\x03\x1b\x02.\n\x0c\n\x05\x04\0\x02\x17\x05\x12\
    \x03\x1b\x02\x07\n\x0c\n\x05\x04\0\x02\x17\x01\x12\x03\x1b\x08(\n\x0c\n\
    \x05\x04\0\x02\x17\x03\x12\x03\x1b+-\n\x0b\n\x04\x04\0\x02\x18\x12\x03\
    \x1c\x02*\n\x0c\n\x05\x04\0\x02\x18\x05\x12\x03\x1c\x02\x07\n\x0c\n\x05\
    \x04\0\x02\x18\x01\x12\x03\x1c\x08$\n\x0c\n\x05\x04\0\x02\x18\x03\x12\
    \x03\x1c')\n\x0b\n\x04\x04\0\x02\x19\x12\x03\x1d\x02+\n\x0c\n\x05\x04\0\
    \x02\x19\x05\x12\x03\x1d\x02\x07\n\x0c\n\x05\x04\0\x02\x19\x01\x12\x03\
    \x1d\x08%\n\x0c\n\x05\x04\0\x02\x19\x03\x12\x03\x1d(*\n\x0b\n\x04\x04\0\
    \x02\x1a\x12\x03\x1e\x02&\n\x0c\n\x05\x04\0\x02\x1a\x05\x12\x03\x1e\x02\
    \x07\n\x0c\n\x05\x04\0\x02\x1a\x01\x12\x03\x1e\x08\x20\n\x0c\n\x05\x04\0\
    \x02\x1a\x03\x12\x03\x1e#%\n\x0b\n\x04\x04\0\x02\x1b\x12\x03\x1f\x02+\n\
    \x0c\n\x05\x04\0\x02\x1b\x05\x12\x03\x1f\x02\x07\n\x0c\n\x05\x04\0\x02\
    \x1b\x01\x12\x03\x1f\x08%\n\x0c\n\x05\x04\0\x02\x1b\x03\x12\x03\x1f(*\n\
    \x0b\n\x04\x04\0\x02\x1c\x12\x03\x20\x02\x1b\n\x0c\n\x05\x04\0\x02\x1c\
    \x05\x12\x03\x20\x02\x07\n\x0c\n\x05\x04\0\x02\x1c\x01\x12\x03\x20\x08\
    \x15\n\x0c\n\x05\x04\0\x02\x1c\x03\x12\x03\x20\x18\x1a\n\x0b\n\x04\x04\0\
    \x02\x1d\x12\x03!\x02\x1e\n\x0c\n\x05\x04\0\x02\x1d\x05\x12\x03!\x02\x07\
    \n\x0c\n\x05\x04\0\x02\x1d\x01\x12\x03!\x08\x18\n\x0c\n\x05\x04\0\x02\
    \x1d\x03\x12\x03!\x1b\x1db\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(KubernetesMetric::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
