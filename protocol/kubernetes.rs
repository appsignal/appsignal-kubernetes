// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `kubernetes.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct KubernetesMetric {
    // message fields
    pub node_name: ::std::string::String,
    pub pod_name: ::std::string::String,
    pub timestamp: i64,
    pub cpu_usage_nano_cores: i64,
    pub cpu_usage_core_nano_seconds: i64,
    pub memory_available_bytes: i64,
    pub memory_usage_bytes: i64,
    pub memory_working_set_bytes: i64,
    pub memory_rss_bytes: i64,
    pub memory_page_faults: i32,
    pub memory_major_page_faults: i32,
    pub network_rx_bytes: i64,
    pub network_rx_errors: i32,
    pub network_tx_bytes: i64,
    pub network_tx_errors: i32,
    pub fs_available_bytes: i64,
    pub fs_capacity_bytes: i64,
    pub fs_used_bytes: i64,
    pub fs_inodes_free: i64,
    pub fs_inodes: i64,
    pub fs_inodes_used: i64,
    pub rlimit_maxpid: i32,
    pub rlimit_curproc: i32,
    pub ephemeral_storage_available_bytes: i64,
    pub ephemeral_storage_capacity_bytes: i64,
    pub ephemeral_storage_used_bytes: i64,
    pub ephemeral_storage_inodes_free: i64,
    pub ephemeral_storage_inodes: i64,
    pub ephemeral_storage_inodes_used: i64,
    pub process_count: i32,
    pub swap_usage_bytes: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a KubernetesMetric {
    fn default() -> &'a KubernetesMetric {
        <KubernetesMetric as ::protobuf::Message>::default_instance()
    }
}

impl KubernetesMetric {
    pub fn new() -> KubernetesMetric {
        ::std::default::Default::default()
    }

    // string node_name = 1;


    pub fn get_node_name(&self) -> &str {
        &self.node_name
    }
    pub fn clear_node_name(&mut self) {
        self.node_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_node_name(&mut self, v: ::std::string::String) {
        self.node_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_node_name(&mut self) -> &mut ::std::string::String {
        &mut self.node_name
    }

    // Take field
    pub fn take_node_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.node_name, ::std::string::String::new())
    }

    // string pod_name = 2;


    pub fn get_pod_name(&self) -> &str {
        &self.pod_name
    }
    pub fn clear_pod_name(&mut self) {
        self.pod_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_pod_name(&mut self, v: ::std::string::String) {
        self.pod_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pod_name(&mut self) -> &mut ::std::string::String {
        &mut self.pod_name
    }

    // Take field
    pub fn take_pod_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pod_name, ::std::string::String::new())
    }

    // int64 timestamp = 31;


    pub fn get_timestamp(&self) -> i64 {
        self.timestamp
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: i64) {
        self.timestamp = v;
    }

    // int64 cpu_usage_nano_cores = 3;


    pub fn get_cpu_usage_nano_cores(&self) -> i64 {
        self.cpu_usage_nano_cores
    }
    pub fn clear_cpu_usage_nano_cores(&mut self) {
        self.cpu_usage_nano_cores = 0;
    }

    // Param is passed by value, moved
    pub fn set_cpu_usage_nano_cores(&mut self, v: i64) {
        self.cpu_usage_nano_cores = v;
    }

    // int64 cpu_usage_core_nano_seconds = 4;


    pub fn get_cpu_usage_core_nano_seconds(&self) -> i64 {
        self.cpu_usage_core_nano_seconds
    }
    pub fn clear_cpu_usage_core_nano_seconds(&mut self) {
        self.cpu_usage_core_nano_seconds = 0;
    }

    // Param is passed by value, moved
    pub fn set_cpu_usage_core_nano_seconds(&mut self, v: i64) {
        self.cpu_usage_core_nano_seconds = v;
    }

    // int64 memory_available_bytes = 5;


    pub fn get_memory_available_bytes(&self) -> i64 {
        self.memory_available_bytes
    }
    pub fn clear_memory_available_bytes(&mut self) {
        self.memory_available_bytes = 0;
    }

    // Param is passed by value, moved
    pub fn set_memory_available_bytes(&mut self, v: i64) {
        self.memory_available_bytes = v;
    }

    // int64 memory_usage_bytes = 6;


    pub fn get_memory_usage_bytes(&self) -> i64 {
        self.memory_usage_bytes
    }
    pub fn clear_memory_usage_bytes(&mut self) {
        self.memory_usage_bytes = 0;
    }

    // Param is passed by value, moved
    pub fn set_memory_usage_bytes(&mut self, v: i64) {
        self.memory_usage_bytes = v;
    }

    // int64 memory_working_set_bytes = 7;


    pub fn get_memory_working_set_bytes(&self) -> i64 {
        self.memory_working_set_bytes
    }
    pub fn clear_memory_working_set_bytes(&mut self) {
        self.memory_working_set_bytes = 0;
    }

    // Param is passed by value, moved
    pub fn set_memory_working_set_bytes(&mut self, v: i64) {
        self.memory_working_set_bytes = v;
    }

    // int64 memory_rss_bytes = 8;


    pub fn get_memory_rss_bytes(&self) -> i64 {
        self.memory_rss_bytes
    }
    pub fn clear_memory_rss_bytes(&mut self) {
        self.memory_rss_bytes = 0;
    }

    // Param is passed by value, moved
    pub fn set_memory_rss_bytes(&mut self, v: i64) {
        self.memory_rss_bytes = v;
    }

    // int32 memory_page_faults = 9;


    pub fn get_memory_page_faults(&self) -> i32 {
        self.memory_page_faults
    }
    pub fn clear_memory_page_faults(&mut self) {
        self.memory_page_faults = 0;
    }

    // Param is passed by value, moved
    pub fn set_memory_page_faults(&mut self, v: i32) {
        self.memory_page_faults = v;
    }

    // int32 memory_major_page_faults = 10;


    pub fn get_memory_major_page_faults(&self) -> i32 {
        self.memory_major_page_faults
    }
    pub fn clear_memory_major_page_faults(&mut self) {
        self.memory_major_page_faults = 0;
    }

    // Param is passed by value, moved
    pub fn set_memory_major_page_faults(&mut self, v: i32) {
        self.memory_major_page_faults = v;
    }

    // int64 network_rx_bytes = 11;


    pub fn get_network_rx_bytes(&self) -> i64 {
        self.network_rx_bytes
    }
    pub fn clear_network_rx_bytes(&mut self) {
        self.network_rx_bytes = 0;
    }

    // Param is passed by value, moved
    pub fn set_network_rx_bytes(&mut self, v: i64) {
        self.network_rx_bytes = v;
    }

    // int32 network_rx_errors = 12;


    pub fn get_network_rx_errors(&self) -> i32 {
        self.network_rx_errors
    }
    pub fn clear_network_rx_errors(&mut self) {
        self.network_rx_errors = 0;
    }

    // Param is passed by value, moved
    pub fn set_network_rx_errors(&mut self, v: i32) {
        self.network_rx_errors = v;
    }

    // int64 network_tx_bytes = 13;


    pub fn get_network_tx_bytes(&self) -> i64 {
        self.network_tx_bytes
    }
    pub fn clear_network_tx_bytes(&mut self) {
        self.network_tx_bytes = 0;
    }

    // Param is passed by value, moved
    pub fn set_network_tx_bytes(&mut self, v: i64) {
        self.network_tx_bytes = v;
    }

    // int32 network_tx_errors = 14;


    pub fn get_network_tx_errors(&self) -> i32 {
        self.network_tx_errors
    }
    pub fn clear_network_tx_errors(&mut self) {
        self.network_tx_errors = 0;
    }

    // Param is passed by value, moved
    pub fn set_network_tx_errors(&mut self, v: i32) {
        self.network_tx_errors = v;
    }

    // int64 fs_available_bytes = 15;


    pub fn get_fs_available_bytes(&self) -> i64 {
        self.fs_available_bytes
    }
    pub fn clear_fs_available_bytes(&mut self) {
        self.fs_available_bytes = 0;
    }

    // Param is passed by value, moved
    pub fn set_fs_available_bytes(&mut self, v: i64) {
        self.fs_available_bytes = v;
    }

    // int64 fs_capacity_bytes = 16;


    pub fn get_fs_capacity_bytes(&self) -> i64 {
        self.fs_capacity_bytes
    }
    pub fn clear_fs_capacity_bytes(&mut self) {
        self.fs_capacity_bytes = 0;
    }

    // Param is passed by value, moved
    pub fn set_fs_capacity_bytes(&mut self, v: i64) {
        self.fs_capacity_bytes = v;
    }

    // int64 fs_used_bytes = 17;


    pub fn get_fs_used_bytes(&self) -> i64 {
        self.fs_used_bytes
    }
    pub fn clear_fs_used_bytes(&mut self) {
        self.fs_used_bytes = 0;
    }

    // Param is passed by value, moved
    pub fn set_fs_used_bytes(&mut self, v: i64) {
        self.fs_used_bytes = v;
    }

    // int64 fs_inodes_free = 18;


    pub fn get_fs_inodes_free(&self) -> i64 {
        self.fs_inodes_free
    }
    pub fn clear_fs_inodes_free(&mut self) {
        self.fs_inodes_free = 0;
    }

    // Param is passed by value, moved
    pub fn set_fs_inodes_free(&mut self, v: i64) {
        self.fs_inodes_free = v;
    }

    // int64 fs_inodes = 19;


    pub fn get_fs_inodes(&self) -> i64 {
        self.fs_inodes
    }
    pub fn clear_fs_inodes(&mut self) {
        self.fs_inodes = 0;
    }

    // Param is passed by value, moved
    pub fn set_fs_inodes(&mut self, v: i64) {
        self.fs_inodes = v;
    }

    // int64 fs_inodes_used = 20;


    pub fn get_fs_inodes_used(&self) -> i64 {
        self.fs_inodes_used
    }
    pub fn clear_fs_inodes_used(&mut self) {
        self.fs_inodes_used = 0;
    }

    // Param is passed by value, moved
    pub fn set_fs_inodes_used(&mut self, v: i64) {
        self.fs_inodes_used = v;
    }

    // int32 rlimit_maxpid = 21;


    pub fn get_rlimit_maxpid(&self) -> i32 {
        self.rlimit_maxpid
    }
    pub fn clear_rlimit_maxpid(&mut self) {
        self.rlimit_maxpid = 0;
    }

    // Param is passed by value, moved
    pub fn set_rlimit_maxpid(&mut self, v: i32) {
        self.rlimit_maxpid = v;
    }

    // int32 rlimit_curproc = 22;


    pub fn get_rlimit_curproc(&self) -> i32 {
        self.rlimit_curproc
    }
    pub fn clear_rlimit_curproc(&mut self) {
        self.rlimit_curproc = 0;
    }

    // Param is passed by value, moved
    pub fn set_rlimit_curproc(&mut self, v: i32) {
        self.rlimit_curproc = v;
    }

    // int64 ephemeral_storage_available_bytes = 23;


    pub fn get_ephemeral_storage_available_bytes(&self) -> i64 {
        self.ephemeral_storage_available_bytes
    }
    pub fn clear_ephemeral_storage_available_bytes(&mut self) {
        self.ephemeral_storage_available_bytes = 0;
    }

    // Param is passed by value, moved
    pub fn set_ephemeral_storage_available_bytes(&mut self, v: i64) {
        self.ephemeral_storage_available_bytes = v;
    }

    // int64 ephemeral_storage_capacity_bytes = 24;


    pub fn get_ephemeral_storage_capacity_bytes(&self) -> i64 {
        self.ephemeral_storage_capacity_bytes
    }
    pub fn clear_ephemeral_storage_capacity_bytes(&mut self) {
        self.ephemeral_storage_capacity_bytes = 0;
    }

    // Param is passed by value, moved
    pub fn set_ephemeral_storage_capacity_bytes(&mut self, v: i64) {
        self.ephemeral_storage_capacity_bytes = v;
    }

    // int64 ephemeral_storage_used_bytes = 25;


    pub fn get_ephemeral_storage_used_bytes(&self) -> i64 {
        self.ephemeral_storage_used_bytes
    }
    pub fn clear_ephemeral_storage_used_bytes(&mut self) {
        self.ephemeral_storage_used_bytes = 0;
    }

    // Param is passed by value, moved
    pub fn set_ephemeral_storage_used_bytes(&mut self, v: i64) {
        self.ephemeral_storage_used_bytes = v;
    }

    // int64 ephemeral_storage_inodes_free = 26;


    pub fn get_ephemeral_storage_inodes_free(&self) -> i64 {
        self.ephemeral_storage_inodes_free
    }
    pub fn clear_ephemeral_storage_inodes_free(&mut self) {
        self.ephemeral_storage_inodes_free = 0;
    }

    // Param is passed by value, moved
    pub fn set_ephemeral_storage_inodes_free(&mut self, v: i64) {
        self.ephemeral_storage_inodes_free = v;
    }

    // int64 ephemeral_storage_inodes = 27;


    pub fn get_ephemeral_storage_inodes(&self) -> i64 {
        self.ephemeral_storage_inodes
    }
    pub fn clear_ephemeral_storage_inodes(&mut self) {
        self.ephemeral_storage_inodes = 0;
    }

    // Param is passed by value, moved
    pub fn set_ephemeral_storage_inodes(&mut self, v: i64) {
        self.ephemeral_storage_inodes = v;
    }

    // int64 ephemeral_storage_inodes_used = 28;


    pub fn get_ephemeral_storage_inodes_used(&self) -> i64 {
        self.ephemeral_storage_inodes_used
    }
    pub fn clear_ephemeral_storage_inodes_used(&mut self) {
        self.ephemeral_storage_inodes_used = 0;
    }

    // Param is passed by value, moved
    pub fn set_ephemeral_storage_inodes_used(&mut self, v: i64) {
        self.ephemeral_storage_inodes_used = v;
    }

    // int32 process_count = 29;


    pub fn get_process_count(&self) -> i32 {
        self.process_count
    }
    pub fn clear_process_count(&mut self) {
        self.process_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_process_count(&mut self, v: i32) {
        self.process_count = v;
    }

    // int64 swap_usage_bytes = 30;


    pub fn get_swap_usage_bytes(&self) -> i64 {
        self.swap_usage_bytes
    }
    pub fn clear_swap_usage_bytes(&mut self) {
        self.swap_usage_bytes = 0;
    }

    // Param is passed by value, moved
    pub fn set_swap_usage_bytes(&mut self, v: i64) {
        self.swap_usage_bytes = v;
    }
}

impl ::protobuf::Message for KubernetesMetric {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.node_name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pod_name)?;
                },
                31 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.timestamp = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.cpu_usage_nano_cores = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.cpu_usage_core_nano_seconds = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.memory_available_bytes = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.memory_usage_bytes = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.memory_working_set_bytes = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.memory_rss_bytes = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.memory_page_faults = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.memory_major_page_faults = tmp;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.network_rx_bytes = tmp;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.network_rx_errors = tmp;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.network_tx_bytes = tmp;
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.network_tx_errors = tmp;
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.fs_available_bytes = tmp;
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.fs_capacity_bytes = tmp;
                },
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.fs_used_bytes = tmp;
                },
                18 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.fs_inodes_free = tmp;
                },
                19 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.fs_inodes = tmp;
                },
                20 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.fs_inodes_used = tmp;
                },
                21 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.rlimit_maxpid = tmp;
                },
                22 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.rlimit_curproc = tmp;
                },
                23 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.ephemeral_storage_available_bytes = tmp;
                },
                24 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.ephemeral_storage_capacity_bytes = tmp;
                },
                25 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.ephemeral_storage_used_bytes = tmp;
                },
                26 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.ephemeral_storage_inodes_free = tmp;
                },
                27 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.ephemeral_storage_inodes = tmp;
                },
                28 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.ephemeral_storage_inodes_used = tmp;
                },
                29 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.process_count = tmp;
                },
                30 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.swap_usage_bytes = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.node_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.node_name);
        }
        if !self.pod_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.pod_name);
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::value_size(31, self.timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.cpu_usage_nano_cores != 0 {
            my_size += ::protobuf::rt::value_size(3, self.cpu_usage_nano_cores, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.cpu_usage_core_nano_seconds != 0 {
            my_size += ::protobuf::rt::value_size(4, self.cpu_usage_core_nano_seconds, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.memory_available_bytes != 0 {
            my_size += ::protobuf::rt::value_size(5, self.memory_available_bytes, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.memory_usage_bytes != 0 {
            my_size += ::protobuf::rt::value_size(6, self.memory_usage_bytes, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.memory_working_set_bytes != 0 {
            my_size += ::protobuf::rt::value_size(7, self.memory_working_set_bytes, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.memory_rss_bytes != 0 {
            my_size += ::protobuf::rt::value_size(8, self.memory_rss_bytes, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.memory_page_faults != 0 {
            my_size += ::protobuf::rt::value_size(9, self.memory_page_faults, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.memory_major_page_faults != 0 {
            my_size += ::protobuf::rt::value_size(10, self.memory_major_page_faults, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.network_rx_bytes != 0 {
            my_size += ::protobuf::rt::value_size(11, self.network_rx_bytes, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.network_rx_errors != 0 {
            my_size += ::protobuf::rt::value_size(12, self.network_rx_errors, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.network_tx_bytes != 0 {
            my_size += ::protobuf::rt::value_size(13, self.network_tx_bytes, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.network_tx_errors != 0 {
            my_size += ::protobuf::rt::value_size(14, self.network_tx_errors, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.fs_available_bytes != 0 {
            my_size += ::protobuf::rt::value_size(15, self.fs_available_bytes, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.fs_capacity_bytes != 0 {
            my_size += ::protobuf::rt::value_size(16, self.fs_capacity_bytes, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.fs_used_bytes != 0 {
            my_size += ::protobuf::rt::value_size(17, self.fs_used_bytes, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.fs_inodes_free != 0 {
            my_size += ::protobuf::rt::value_size(18, self.fs_inodes_free, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.fs_inodes != 0 {
            my_size += ::protobuf::rt::value_size(19, self.fs_inodes, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.fs_inodes_used != 0 {
            my_size += ::protobuf::rt::value_size(20, self.fs_inodes_used, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.rlimit_maxpid != 0 {
            my_size += ::protobuf::rt::value_size(21, self.rlimit_maxpid, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.rlimit_curproc != 0 {
            my_size += ::protobuf::rt::value_size(22, self.rlimit_curproc, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.ephemeral_storage_available_bytes != 0 {
            my_size += ::protobuf::rt::value_size(23, self.ephemeral_storage_available_bytes, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.ephemeral_storage_capacity_bytes != 0 {
            my_size += ::protobuf::rt::value_size(24, self.ephemeral_storage_capacity_bytes, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.ephemeral_storage_used_bytes != 0 {
            my_size += ::protobuf::rt::value_size(25, self.ephemeral_storage_used_bytes, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.ephemeral_storage_inodes_free != 0 {
            my_size += ::protobuf::rt::value_size(26, self.ephemeral_storage_inodes_free, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.ephemeral_storage_inodes != 0 {
            my_size += ::protobuf::rt::value_size(27, self.ephemeral_storage_inodes, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.ephemeral_storage_inodes_used != 0 {
            my_size += ::protobuf::rt::value_size(28, self.ephemeral_storage_inodes_used, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.process_count != 0 {
            my_size += ::protobuf::rt::value_size(29, self.process_count, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.swap_usage_bytes != 0 {
            my_size += ::protobuf::rt::value_size(30, self.swap_usage_bytes, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.node_name.is_empty() {
            os.write_string(1, &self.node_name)?;
        }
        if !self.pod_name.is_empty() {
            os.write_string(2, &self.pod_name)?;
        }
        if self.timestamp != 0 {
            os.write_int64(31, self.timestamp)?;
        }
        if self.cpu_usage_nano_cores != 0 {
            os.write_int64(3, self.cpu_usage_nano_cores)?;
        }
        if self.cpu_usage_core_nano_seconds != 0 {
            os.write_int64(4, self.cpu_usage_core_nano_seconds)?;
        }
        if self.memory_available_bytes != 0 {
            os.write_int64(5, self.memory_available_bytes)?;
        }
        if self.memory_usage_bytes != 0 {
            os.write_int64(6, self.memory_usage_bytes)?;
        }
        if self.memory_working_set_bytes != 0 {
            os.write_int64(7, self.memory_working_set_bytes)?;
        }
        if self.memory_rss_bytes != 0 {
            os.write_int64(8, self.memory_rss_bytes)?;
        }
        if self.memory_page_faults != 0 {
            os.write_int32(9, self.memory_page_faults)?;
        }
        if self.memory_major_page_faults != 0 {
            os.write_int32(10, self.memory_major_page_faults)?;
        }
        if self.network_rx_bytes != 0 {
            os.write_int64(11, self.network_rx_bytes)?;
        }
        if self.network_rx_errors != 0 {
            os.write_int32(12, self.network_rx_errors)?;
        }
        if self.network_tx_bytes != 0 {
            os.write_int64(13, self.network_tx_bytes)?;
        }
        if self.network_tx_errors != 0 {
            os.write_int32(14, self.network_tx_errors)?;
        }
        if self.fs_available_bytes != 0 {
            os.write_int64(15, self.fs_available_bytes)?;
        }
        if self.fs_capacity_bytes != 0 {
            os.write_int64(16, self.fs_capacity_bytes)?;
        }
        if self.fs_used_bytes != 0 {
            os.write_int64(17, self.fs_used_bytes)?;
        }
        if self.fs_inodes_free != 0 {
            os.write_int64(18, self.fs_inodes_free)?;
        }
        if self.fs_inodes != 0 {
            os.write_int64(19, self.fs_inodes)?;
        }
        if self.fs_inodes_used != 0 {
            os.write_int64(20, self.fs_inodes_used)?;
        }
        if self.rlimit_maxpid != 0 {
            os.write_int32(21, self.rlimit_maxpid)?;
        }
        if self.rlimit_curproc != 0 {
            os.write_int32(22, self.rlimit_curproc)?;
        }
        if self.ephemeral_storage_available_bytes != 0 {
            os.write_int64(23, self.ephemeral_storage_available_bytes)?;
        }
        if self.ephemeral_storage_capacity_bytes != 0 {
            os.write_int64(24, self.ephemeral_storage_capacity_bytes)?;
        }
        if self.ephemeral_storage_used_bytes != 0 {
            os.write_int64(25, self.ephemeral_storage_used_bytes)?;
        }
        if self.ephemeral_storage_inodes_free != 0 {
            os.write_int64(26, self.ephemeral_storage_inodes_free)?;
        }
        if self.ephemeral_storage_inodes != 0 {
            os.write_int64(27, self.ephemeral_storage_inodes)?;
        }
        if self.ephemeral_storage_inodes_used != 0 {
            os.write_int64(28, self.ephemeral_storage_inodes_used)?;
        }
        if self.process_count != 0 {
            os.write_int32(29, self.process_count)?;
        }
        if self.swap_usage_bytes != 0 {
            os.write_int64(30, self.swap_usage_bytes)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> KubernetesMetric {
        KubernetesMetric::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "node_name",
                |m: &KubernetesMetric| { &m.node_name },
                |m: &mut KubernetesMetric| { &mut m.node_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pod_name",
                |m: &KubernetesMetric| { &m.pod_name },
                |m: &mut KubernetesMetric| { &mut m.pod_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "timestamp",
                |m: &KubernetesMetric| { &m.timestamp },
                |m: &mut KubernetesMetric| { &mut m.timestamp },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "cpu_usage_nano_cores",
                |m: &KubernetesMetric| { &m.cpu_usage_nano_cores },
                |m: &mut KubernetesMetric| { &mut m.cpu_usage_nano_cores },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "cpu_usage_core_nano_seconds",
                |m: &KubernetesMetric| { &m.cpu_usage_core_nano_seconds },
                |m: &mut KubernetesMetric| { &mut m.cpu_usage_core_nano_seconds },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "memory_available_bytes",
                |m: &KubernetesMetric| { &m.memory_available_bytes },
                |m: &mut KubernetesMetric| { &mut m.memory_available_bytes },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "memory_usage_bytes",
                |m: &KubernetesMetric| { &m.memory_usage_bytes },
                |m: &mut KubernetesMetric| { &mut m.memory_usage_bytes },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "memory_working_set_bytes",
                |m: &KubernetesMetric| { &m.memory_working_set_bytes },
                |m: &mut KubernetesMetric| { &mut m.memory_working_set_bytes },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "memory_rss_bytes",
                |m: &KubernetesMetric| { &m.memory_rss_bytes },
                |m: &mut KubernetesMetric| { &mut m.memory_rss_bytes },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "memory_page_faults",
                |m: &KubernetesMetric| { &m.memory_page_faults },
                |m: &mut KubernetesMetric| { &mut m.memory_page_faults },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "memory_major_page_faults",
                |m: &KubernetesMetric| { &m.memory_major_page_faults },
                |m: &mut KubernetesMetric| { &mut m.memory_major_page_faults },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "network_rx_bytes",
                |m: &KubernetesMetric| { &m.network_rx_bytes },
                |m: &mut KubernetesMetric| { &mut m.network_rx_bytes },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "network_rx_errors",
                |m: &KubernetesMetric| { &m.network_rx_errors },
                |m: &mut KubernetesMetric| { &mut m.network_rx_errors },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "network_tx_bytes",
                |m: &KubernetesMetric| { &m.network_tx_bytes },
                |m: &mut KubernetesMetric| { &mut m.network_tx_bytes },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "network_tx_errors",
                |m: &KubernetesMetric| { &m.network_tx_errors },
                |m: &mut KubernetesMetric| { &mut m.network_tx_errors },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "fs_available_bytes",
                |m: &KubernetesMetric| { &m.fs_available_bytes },
                |m: &mut KubernetesMetric| { &mut m.fs_available_bytes },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "fs_capacity_bytes",
                |m: &KubernetesMetric| { &m.fs_capacity_bytes },
                |m: &mut KubernetesMetric| { &mut m.fs_capacity_bytes },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "fs_used_bytes",
                |m: &KubernetesMetric| { &m.fs_used_bytes },
                |m: &mut KubernetesMetric| { &mut m.fs_used_bytes },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "fs_inodes_free",
                |m: &KubernetesMetric| { &m.fs_inodes_free },
                |m: &mut KubernetesMetric| { &mut m.fs_inodes_free },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "fs_inodes",
                |m: &KubernetesMetric| { &m.fs_inodes },
                |m: &mut KubernetesMetric| { &mut m.fs_inodes },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "fs_inodes_used",
                |m: &KubernetesMetric| { &m.fs_inodes_used },
                |m: &mut KubernetesMetric| { &mut m.fs_inodes_used },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "rlimit_maxpid",
                |m: &KubernetesMetric| { &m.rlimit_maxpid },
                |m: &mut KubernetesMetric| { &mut m.rlimit_maxpid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "rlimit_curproc",
                |m: &KubernetesMetric| { &m.rlimit_curproc },
                |m: &mut KubernetesMetric| { &mut m.rlimit_curproc },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "ephemeral_storage_available_bytes",
                |m: &KubernetesMetric| { &m.ephemeral_storage_available_bytes },
                |m: &mut KubernetesMetric| { &mut m.ephemeral_storage_available_bytes },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "ephemeral_storage_capacity_bytes",
                |m: &KubernetesMetric| { &m.ephemeral_storage_capacity_bytes },
                |m: &mut KubernetesMetric| { &mut m.ephemeral_storage_capacity_bytes },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "ephemeral_storage_used_bytes",
                |m: &KubernetesMetric| { &m.ephemeral_storage_used_bytes },
                |m: &mut KubernetesMetric| { &mut m.ephemeral_storage_used_bytes },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "ephemeral_storage_inodes_free",
                |m: &KubernetesMetric| { &m.ephemeral_storage_inodes_free },
                |m: &mut KubernetesMetric| { &mut m.ephemeral_storage_inodes_free },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "ephemeral_storage_inodes",
                |m: &KubernetesMetric| { &m.ephemeral_storage_inodes },
                |m: &mut KubernetesMetric| { &mut m.ephemeral_storage_inodes },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "ephemeral_storage_inodes_used",
                |m: &KubernetesMetric| { &m.ephemeral_storage_inodes_used },
                |m: &mut KubernetesMetric| { &mut m.ephemeral_storage_inodes_used },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "process_count",
                |m: &KubernetesMetric| { &m.process_count },
                |m: &mut KubernetesMetric| { &mut m.process_count },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "swap_usage_bytes",
                |m: &KubernetesMetric| { &m.swap_usage_bytes },
                |m: &mut KubernetesMetric| { &mut m.swap_usage_bytes },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<KubernetesMetric>(
                "KubernetesMetric",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static KubernetesMetric {
        static instance: ::protobuf::rt::LazyV2<KubernetesMetric> = ::protobuf::rt::LazyV2::INIT;
        instance.get(KubernetesMetric::new)
    }
}

impl ::protobuf::Clear for KubernetesMetric {
    fn clear(&mut self) {
        self.node_name.clear();
        self.pod_name.clear();
        self.timestamp = 0;
        self.cpu_usage_nano_cores = 0;
        self.cpu_usage_core_nano_seconds = 0;
        self.memory_available_bytes = 0;
        self.memory_usage_bytes = 0;
        self.memory_working_set_bytes = 0;
        self.memory_rss_bytes = 0;
        self.memory_page_faults = 0;
        self.memory_major_page_faults = 0;
        self.network_rx_bytes = 0;
        self.network_rx_errors = 0;
        self.network_tx_bytes = 0;
        self.network_tx_errors = 0;
        self.fs_available_bytes = 0;
        self.fs_capacity_bytes = 0;
        self.fs_used_bytes = 0;
        self.fs_inodes_free = 0;
        self.fs_inodes = 0;
        self.fs_inodes_used = 0;
        self.rlimit_maxpid = 0;
        self.rlimit_curproc = 0;
        self.ephemeral_storage_available_bytes = 0;
        self.ephemeral_storage_capacity_bytes = 0;
        self.ephemeral_storage_used_bytes = 0;
        self.ephemeral_storage_inodes_free = 0;
        self.ephemeral_storage_inodes = 0;
        self.ephemeral_storage_inodes_used = 0;
        self.process_count = 0;
        self.swap_usage_bytes = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for KubernetesMetric {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for KubernetesMetric {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x10kubernetes.proto\x12\x13protocol.kubernetes\"\xc8\x0b\n\x10Kuberne\
    tesMetric\x12\x1b\n\tnode_name\x18\x01\x20\x01(\tR\x08nodeName\x12\x19\n\
    \x08pod_name\x18\x02\x20\x01(\tR\x07podName\x12\x1c\n\ttimestamp\x18\x1f\
    \x20\x01(\x03R\ttimestamp\x12/\n\x14cpu_usage_nano_cores\x18\x03\x20\x01\
    (\x03R\x11cpuUsageNanoCores\x12<\n\x1bcpu_usage_core_nano_seconds\x18\
    \x04\x20\x01(\x03R\x17cpuUsageCoreNanoSeconds\x124\n\x16memory_available\
    _bytes\x18\x05\x20\x01(\x03R\x14memoryAvailableBytes\x12,\n\x12memory_us\
    age_bytes\x18\x06\x20\x01(\x03R\x10memoryUsageBytes\x127\n\x18memory_wor\
    king_set_bytes\x18\x07\x20\x01(\x03R\x15memoryWorkingSetBytes\x12(\n\x10\
    memory_rss_bytes\x18\x08\x20\x01(\x03R\x0ememoryRssBytes\x12,\n\x12memor\
    y_page_faults\x18\t\x20\x01(\x05R\x10memoryPageFaults\x127\n\x18memory_m\
    ajor_page_faults\x18\n\x20\x01(\x05R\x15memoryMajorPageFaults\x12(\n\x10\
    network_rx_bytes\x18\x0b\x20\x01(\x03R\x0enetworkRxBytes\x12*\n\x11netwo\
    rk_rx_errors\x18\x0c\x20\x01(\x05R\x0fnetworkRxErrors\x12(\n\x10network_\
    tx_bytes\x18\r\x20\x01(\x03R\x0enetworkTxBytes\x12*\n\x11network_tx_erro\
    rs\x18\x0e\x20\x01(\x05R\x0fnetworkTxErrors\x12,\n\x12fs_available_bytes\
    \x18\x0f\x20\x01(\x03R\x10fsAvailableBytes\x12*\n\x11fs_capacity_bytes\
    \x18\x10\x20\x01(\x03R\x0ffsCapacityBytes\x12\"\n\rfs_used_bytes\x18\x11\
    \x20\x01(\x03R\x0bfsUsedBytes\x12$\n\x0efs_inodes_free\x18\x12\x20\x01(\
    \x03R\x0cfsInodesFree\x12\x1b\n\tfs_inodes\x18\x13\x20\x01(\x03R\x08fsIn\
    odes\x12$\n\x0efs_inodes_used\x18\x14\x20\x01(\x03R\x0cfsInodesUsed\x12#\
    \n\rrlimit_maxpid\x18\x15\x20\x01(\x05R\x0crlimitMaxpid\x12%\n\x0erlimit\
    _curproc\x18\x16\x20\x01(\x05R\rrlimitCurproc\x12I\n!ephemeral_storage_a\
    vailable_bytes\x18\x17\x20\x01(\x03R\x1eephemeralStorageAvailableBytes\
    \x12G\n\x20ephemeral_storage_capacity_bytes\x18\x18\x20\x01(\x03R\x1deph\
    emeralStorageCapacityBytes\x12?\n\x1cephemeral_storage_used_bytes\x18\
    \x19\x20\x01(\x03R\x19ephemeralStorageUsedBytes\x12A\n\x1dephemeral_stor\
    age_inodes_free\x18\x1a\x20\x01(\x03R\x1aephemeralStorageInodesFree\x128\
    \n\x18ephemeral_storage_inodes\x18\x1b\x20\x01(\x03R\x16ephemeralStorage\
    Inodes\x12A\n\x1dephemeral_storage_inodes_used\x18\x1c\x20\x01(\x03R\x1a\
    ephemeralStorageInodesUsed\x12#\n\rprocess_count\x18\x1d\x20\x01(\x05R\
    \x0cprocessCount\x12(\n\x10swap_usage_bytes\x18\x1e\x20\x01(\x03R\x0eswa\
    pUsageBytesJ\xdd\r\n\x06\x12\x04\0\0#\x01\n\x08\n\x01\x0c\x12\x03\0\0\
    \x12\n\x08\n\x01\x02\x12\x03\x01\0\x1c\n\n\n\x02\x04\0\x12\x04\x03\0#\
    \x01\n\n\n\x03\x04\0\x01\x12\x03\x03\x08\x18\n\x0b\n\x04\x04\0\x02\0\x12\
    \x03\x04\x02\x17\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x04\x02\x08\n\x0c\n\
    \x05\x04\0\x02\0\x01\x12\x03\x04\t\x12\n\x0c\n\x05\x04\0\x02\0\x03\x12\
    \x03\x04\x15\x16\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x05\x02\x16\n\x0c\n\
    \x05\x04\0\x02\x01\x05\x12\x03\x05\x02\x08\n\x0c\n\x05\x04\0\x02\x01\x01\
    \x12\x03\x05\t\x11\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x05\x14\x15\n\
    \x0b\n\x04\x04\0\x02\x02\x12\x03\x06\x02\x17\n\x0c\n\x05\x04\0\x02\x02\
    \x05\x12\x03\x06\x02\x07\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x06\x08\
    \x11\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x06\x14\x16\n\x0b\n\x04\x04\0\
    \x02\x03\x12\x03\x07\x02!\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03\x07\x02\
    \x07\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x07\x08\x1c\n\x0c\n\x05\x04\0\
    \x02\x03\x03\x12\x03\x07\x1f\x20\n\x0b\n\x04\x04\0\x02\x04\x12\x03\x08\
    \x02(\n\x0c\n\x05\x04\0\x02\x04\x05\x12\x03\x08\x02\x07\n\x0c\n\x05\x04\
    \0\x02\x04\x01\x12\x03\x08\x08#\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03\
    \x08&'\n\x0b\n\x04\x04\0\x02\x05\x12\x03\t\x02#\n\x0c\n\x05\x04\0\x02\
    \x05\x05\x12\x03\t\x02\x07\n\x0c\n\x05\x04\0\x02\x05\x01\x12\x03\t\x08\
    \x1e\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03\t!\"\n\x0b\n\x04\x04\0\x02\
    \x06\x12\x03\n\x02\x1f\n\x0c\n\x05\x04\0\x02\x06\x05\x12\x03\n\x02\x07\n\
    \x0c\n\x05\x04\0\x02\x06\x01\x12\x03\n\x08\x1a\n\x0c\n\x05\x04\0\x02\x06\
    \x03\x12\x03\n\x1d\x1e\n\x0b\n\x04\x04\0\x02\x07\x12\x03\x0b\x02%\n\x0c\
    \n\x05\x04\0\x02\x07\x05\x12\x03\x0b\x02\x07\n\x0c\n\x05\x04\0\x02\x07\
    \x01\x12\x03\x0b\x08\x20\n\x0c\n\x05\x04\0\x02\x07\x03\x12\x03\x0b#$\n\
    \x0b\n\x04\x04\0\x02\x08\x12\x03\x0c\x02\x1d\n\x0c\n\x05\x04\0\x02\x08\
    \x05\x12\x03\x0c\x02\x07\n\x0c\n\x05\x04\0\x02\x08\x01\x12\x03\x0c\x08\
    \x18\n\x0c\n\x05\x04\0\x02\x08\x03\x12\x03\x0c\x1b\x1c\n\x0b\n\x04\x04\0\
    \x02\t\x12\x03\r\x02\x1f\n\x0c\n\x05\x04\0\x02\t\x05\x12\x03\r\x02\x07\n\
    \x0c\n\x05\x04\0\x02\t\x01\x12\x03\r\x08\x1a\n\x0c\n\x05\x04\0\x02\t\x03\
    \x12\x03\r\x1d\x1e\n\x0b\n\x04\x04\0\x02\n\x12\x03\x0e\x02&\n\x0c\n\x05\
    \x04\0\x02\n\x05\x12\x03\x0e\x02\x07\n\x0c\n\x05\x04\0\x02\n\x01\x12\x03\
    \x0e\x08\x20\n\x0c\n\x05\x04\0\x02\n\x03\x12\x03\x0e#%\n\x0b\n\x04\x04\0\
    \x02\x0b\x12\x03\x0f\x02\x1e\n\x0c\n\x05\x04\0\x02\x0b\x05\x12\x03\x0f\
    \x02\x07\n\x0c\n\x05\x04\0\x02\x0b\x01\x12\x03\x0f\x08\x18\n\x0c\n\x05\
    \x04\0\x02\x0b\x03\x12\x03\x0f\x1b\x1d\n\x0b\n\x04\x04\0\x02\x0c\x12\x03\
    \x10\x02\x1f\n\x0c\n\x05\x04\0\x02\x0c\x05\x12\x03\x10\x02\x07\n\x0c\n\
    \x05\x04\0\x02\x0c\x01\x12\x03\x10\x08\x19\n\x0c\n\x05\x04\0\x02\x0c\x03\
    \x12\x03\x10\x1c\x1e\n\x0b\n\x04\x04\0\x02\r\x12\x03\x11\x02\x1e\n\x0c\n\
    \x05\x04\0\x02\r\x05\x12\x03\x11\x02\x07\n\x0c\n\x05\x04\0\x02\r\x01\x12\
    \x03\x11\x08\x18\n\x0c\n\x05\x04\0\x02\r\x03\x12\x03\x11\x1b\x1d\n\x0b\n\
    \x04\x04\0\x02\x0e\x12\x03\x12\x02\x1f\n\x0c\n\x05\x04\0\x02\x0e\x05\x12\
    \x03\x12\x02\x07\n\x0c\n\x05\x04\0\x02\x0e\x01\x12\x03\x12\x08\x19\n\x0c\
    \n\x05\x04\0\x02\x0e\x03\x12\x03\x12\x1c\x1e\n\x0b\n\x04\x04\0\x02\x0f\
    \x12\x03\x13\x02\x20\n\x0c\n\x05\x04\0\x02\x0f\x05\x12\x03\x13\x02\x07\n\
    \x0c\n\x05\x04\0\x02\x0f\x01\x12\x03\x13\x08\x1a\n\x0c\n\x05\x04\0\x02\
    \x0f\x03\x12\x03\x13\x1d\x1f\n\x0b\n\x04\x04\0\x02\x10\x12\x03\x14\x02\
    \x1f\n\x0c\n\x05\x04\0\x02\x10\x05\x12\x03\x14\x02\x07\n\x0c\n\x05\x04\0\
    \x02\x10\x01\x12\x03\x14\x08\x19\n\x0c\n\x05\x04\0\x02\x10\x03\x12\x03\
    \x14\x1c\x1e\n\x0b\n\x04\x04\0\x02\x11\x12\x03\x15\x02\x1b\n\x0c\n\x05\
    \x04\0\x02\x11\x05\x12\x03\x15\x02\x07\n\x0c\n\x05\x04\0\x02\x11\x01\x12\
    \x03\x15\x08\x15\n\x0c\n\x05\x04\0\x02\x11\x03\x12\x03\x15\x18\x1a\n\x0b\
    \n\x04\x04\0\x02\x12\x12\x03\x16\x02\x1c\n\x0c\n\x05\x04\0\x02\x12\x05\
    \x12\x03\x16\x02\x07\n\x0c\n\x05\x04\0\x02\x12\x01\x12\x03\x16\x08\x16\n\
    \x0c\n\x05\x04\0\x02\x12\x03\x12\x03\x16\x19\x1b\n\x0b\n\x04\x04\0\x02\
    \x13\x12\x03\x17\x02\x17\n\x0c\n\x05\x04\0\x02\x13\x05\x12\x03\x17\x02\
    \x07\n\x0c\n\x05\x04\0\x02\x13\x01\x12\x03\x17\x08\x11\n\x0c\n\x05\x04\0\
    \x02\x13\x03\x12\x03\x17\x14\x16\n\x0b\n\x04\x04\0\x02\x14\x12\x03\x18\
    \x02\x1c\n\x0c\n\x05\x04\0\x02\x14\x05\x12\x03\x18\x02\x07\n\x0c\n\x05\
    \x04\0\x02\x14\x01\x12\x03\x18\x08\x16\n\x0c\n\x05\x04\0\x02\x14\x03\x12\
    \x03\x18\x19\x1b\n\x0b\n\x04\x04\0\x02\x15\x12\x03\x19\x02\x1b\n\x0c\n\
    \x05\x04\0\x02\x15\x05\x12\x03\x19\x02\x07\n\x0c\n\x05\x04\0\x02\x15\x01\
    \x12\x03\x19\x08\x15\n\x0c\n\x05\x04\0\x02\x15\x03\x12\x03\x19\x18\x1a\n\
    \x0b\n\x04\x04\0\x02\x16\x12\x03\x1a\x02\x1c\n\x0c\n\x05\x04\0\x02\x16\
    \x05\x12\x03\x1a\x02\x07\n\x0c\n\x05\x04\0\x02\x16\x01\x12\x03\x1a\x08\
    \x16\n\x0c\n\x05\x04\0\x02\x16\x03\x12\x03\x1a\x19\x1b\n\x0b\n\x04\x04\0\
    \x02\x17\x12\x03\x1b\x02/\n\x0c\n\x05\x04\0\x02\x17\x05\x12\x03\x1b\x02\
    \x07\n\x0c\n\x05\x04\0\x02\x17\x01\x12\x03\x1b\x08)\n\x0c\n\x05\x04\0\
    \x02\x17\x03\x12\x03\x1b,.\n\x0b\n\x04\x04\0\x02\x18\x12\x03\x1c\x02.\n\
    \x0c\n\x05\x04\0\x02\x18\x05\x12\x03\x1c\x02\x07\n\x0c\n\x05\x04\0\x02\
    \x18\x01\x12\x03\x1c\x08(\n\x0c\n\x05\x04\0\x02\x18\x03\x12\x03\x1c+-\n\
    \x0b\n\x04\x04\0\x02\x19\x12\x03\x1d\x02*\n\x0c\n\x05\x04\0\x02\x19\x05\
    \x12\x03\x1d\x02\x07\n\x0c\n\x05\x04\0\x02\x19\x01\x12\x03\x1d\x08$\n\
    \x0c\n\x05\x04\0\x02\x19\x03\x12\x03\x1d')\n\x0b\n\x04\x04\0\x02\x1a\x12\
    \x03\x1e\x02+\n\x0c\n\x05\x04\0\x02\x1a\x05\x12\x03\x1e\x02\x07\n\x0c\n\
    \x05\x04\0\x02\x1a\x01\x12\x03\x1e\x08%\n\x0c\n\x05\x04\0\x02\x1a\x03\
    \x12\x03\x1e(*\n\x0b\n\x04\x04\0\x02\x1b\x12\x03\x1f\x02&\n\x0c\n\x05\
    \x04\0\x02\x1b\x05\x12\x03\x1f\x02\x07\n\x0c\n\x05\x04\0\x02\x1b\x01\x12\
    \x03\x1f\x08\x20\n\x0c\n\x05\x04\0\x02\x1b\x03\x12\x03\x1f#%\n\x0b\n\x04\
    \x04\0\x02\x1c\x12\x03\x20\x02+\n\x0c\n\x05\x04\0\x02\x1c\x05\x12\x03\
    \x20\x02\x07\n\x0c\n\x05\x04\0\x02\x1c\x01\x12\x03\x20\x08%\n\x0c\n\x05\
    \x04\0\x02\x1c\x03\x12\x03\x20(*\n\x0b\n\x04\x04\0\x02\x1d\x12\x03!\x02\
    \x1b\n\x0c\n\x05\x04\0\x02\x1d\x05\x12\x03!\x02\x07\n\x0c\n\x05\x04\0\
    \x02\x1d\x01\x12\x03!\x08\x15\n\x0c\n\x05\x04\0\x02\x1d\x03\x12\x03!\x18\
    \x1a\n\x0b\n\x04\x04\0\x02\x1e\x12\x03\"\x02\x1e\n\x0c\n\x05\x04\0\x02\
    \x1e\x05\x12\x03\"\x02\x07\n\x0c\n\x05\x04\0\x02\x1e\x01\x12\x03\"\x08\
    \x18\n\x0c\n\x05\x04\0\x02\x1e\x03\x12\x03\"\x1b\x1db\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
